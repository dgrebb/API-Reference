{
  "info": {
    "_postman_id": "e183b136-9a73-4c85-b0f8-10cc664c8865",
    "name": "Jira Software Data Center REST API Reference",
    "description": "This is the reference document for the REST API and resources provided by Jira Software Data Center. The REST APIs are for developers who want to integrate Jira Data Center with other applications, and for administrators who want to script configuration interactions with Jira Data Center.\n\nJira Data Center is built upon the Jira platform.  As such there is a natural overlap in functionality between what is provided by Jira Data Center and what is provided by the Jira platform.  If you are after an introductory, high-level view of the Jira REST APIs, then the best place to start is the [Jira REST API home](https://developer.atlassian.com/server/jira/platform/rest-apis/).\n## Using the REST API\nNot familiar with the Jira Data Center REST APIs? Start with our [Guide to exploring the Jira Data Center domain model via the REST APIs](https://developer.atlassian.com/server/jira/platform/tutorials_and_guides/), which will help you get a conceptual understanding of the Jira Data Center REST APIs.\n\nIf you want instructions on how to use the REST APIs, check out the [Appendix](#appendix) at the end of this page (after the resources), where you'll find information on the following topics:\n* [Structure of the REST URIs](#structure)\n* [Authentication](#authentication)\n* [Pagination](#pagination)\n* [Expansion](#expansion)\n* [Special headers](#special-headers)\n* [Field input formats](#fieldformats)\n### Experimental methods\nMethods marked as `EXPERIMENTAL` may change without notice. We are looking for your feedback for these methods. To use experimental methods, you must set this header in your requests: `X-ExperimentalApi : true`. This indicates that you are opting into the experimental preview. Once a resource or method moves out of the experimental phase, then this header will no longer be required nor checked.\n",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "backlog",
      "item": [
        {
          "name": "Update issues to move them to the backlog",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/backlog/issue",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Move issues to the backlog. This operation is equivalent to remove future and active sprints from a given set of issues. At most 50 issues may be moved at once.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "board",
      "item": [
        {
          "name": "Get all boards",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "name",
                  "value": "{{name}}",
                  "disabled": true
                },
                {
                  "key": "projectKeyOrId",
                  "value": "{{projectKeyOrId}}",
                  "disabled": true
                },
                {
                  "key": "type",
                  "value": "{{type}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all boards. This only includes boards that the user has permission to view.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create a new board",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Creates a new board. Board name, type and filter Id is required.\n- name - Must be less than 255 characters.\n- type - Valid values: scrum, kanban\n- filterId - Id of a filter that the user has permissions to view. Note, if the user does not have the 'Create shared objects' permission and tries to create a shared board, a private board will be created instead (remember that board sharing depends on the filter sharing).\nNote:\n- If you want to create a new project with an associated board, use the JIRA platform REST API. For more information, see the Create project method. The projectTypeKey for software boards must be 'software' and the projectTemplateKey must be either com.pyxis.greenhopper.jira:gh-kanban-template or com.pyxis.greenhopper.jira:gh-scrum-template.\n- You can create a filter using the JIRA REST API. For more information, see the Create filter method.\n- If you do not ORDER BY the Rank field for the filter of your board, you will not be able to reorder issues on the board.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get a single board",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId",
              "query": [],
              "variable": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a single board, for a given board Id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Delete the board",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId",
              "query": [],
              "variable": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes the board.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all issues from the board's backlog",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/backlog",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "jql",
                  "value": "{{jql}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "validateQuery",
                  "value": "{{validateQuery}}",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "{{fields}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all issues from a board's backlog, for a given board Id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get the board configuration",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/configuration",
              "query": [],
              "variable": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Get the board configuration.\nThe response contains the following fields:\n- id - Id of the board.\n- name - Name of the board.\n- filter - Reference to the filter used by the given board.\n- subQuery (Kanban only) - JQL subquery used by the given board.\n- columnConfig - The column configuration lists the columns for the board, in the order defined in the column configuration.\nFor each column, it shows the issue status mapping\nas well as the constraint type (Valid values: none, issueCount, issueCountExclSubs) for the min/max number of issues.\nNote, the last column with statuses mapped to it is treated as the \"Done\" column,\nwhich means that issues in that column will be marked as already completed.\n- estimation (Scrum only) - Contains information about type of estimation used for the board. Valid values: none, issueCount, field.\nIf the estimation type is \"field\", the Id and display name of the field used for estimation is also returned.\nNote, estimates for an issue can be updated by a PUT /rest/api/2/issue/{issueIdOrKey} request, however the fields must be on the screen.\n\"timeoriginalestimate\" field will never be on the screen, so in order to update it \"originalEstimate\" in \"timetracking\" field should be updated.\n- ranking - Contains information about custom field used for ranking in the given board.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all epics from the board",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/epic",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "done",
                  "value": "{{done}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all epics from the board, for the given board Id. This only includes epics that the user has permission to view. Note, if the user does not have permission to view the board, no epics will be returned at all.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all issues without an epic",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/epic/none/issue",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "jql",
                  "value": "{{jql}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "validateQuery",
                  "value": "{{validateQuery}}",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "{{fields}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all issues that do not belong to any epic on a board, for a given board Id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all issues for a specific epic",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/epic/:epicId/issue",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "jql",
                  "value": "{{jql}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "validateQuery",
                  "value": "{{validateQuery}}",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "{{fields}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "epicId",
                  "value": "{{epicId}}",
                  "disabled": false
                },
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all issues that belong to an epic on the board, for the given epic Id and the board Id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all issues from a board",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/issue",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "jql",
                  "value": "{{jql}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "validateQuery",
                  "value": "{{validateQuery}}",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "{{fields}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all issues from a board, for a given board Id. This only includes issues that the user has permission to view. Note, if the user does not have permission to view the board, no issues will be returned at all. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all projects associated with the board",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/project",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all projects that are associated with the board, for the given board Id. A project is associated with a board only if the board filter explicitly filters issues by the project and guaranties that all issues will come for one of those projects e.g. board's filter with \"project in (PR-1, PR-1) OR reporter = admin\" jql Projects are returned only if user can browse all projects that are associated with the board. Note, if the user does not have permission to view the board, no projects will be returned at all. Returned projects are ordered by the name.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all properties keys for a board",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/properties",
              "query": [],
              "variable": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the keys of all properties for the board identified by the id. The user who retrieves the property keys is required to have permissions to view the board.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get a property from a board",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "disabled": false
                },
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the value of the property with a given key from the board identified by the provided id. The user who retrieves the property is required to have permissions to view the board.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update a board's property",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "disabled": false
                },
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Sets the value of the specified board's property. You can use this resource to store a custom data against the board identified by the id. The user who stores the data is required to have permissions to modify the board.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Delete a property from a board",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "disabled": false
                },
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes the property from the board identified by the id. Ths user removing the property is required to have permissions to modify the board.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get the value of the refined velocity setting",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/settings/refined-velocity",
              "query": [],
              "variable": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the value of the setting for refined velocity chart",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update the board's refined velocity setting",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/settings/refined-velocity",
              "query": [],
              "variable": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Sets the value of the specified board's refined velocity setting.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get all sprints from a board",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/sprint",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "state",
                  "value": "{{state}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all sprints from a board, for a given board Id. This only includes sprints that the user has permission to view.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all issues for a sprint",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/sprint/:sprintId/issue",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "jql",
                  "value": "{{jql}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "validateQuery",
                  "value": "{{validateQuery}}",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "{{fields}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "sprintId",
                  "value": "{{sprintId}}",
                  "disabled": false
                },
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Get all issues you have access to that belong to the sprint from the board. Issue returned from this resource contains additional fields like: sprint, closedSprints, flagged and epic. Issues are returned ordered by rank. JQL order has higher priority than default rank.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all versions from a board",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/board/:boardId/version",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "released",
                  "value": "{{released}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all versions from a board, for a given board Id. This only includes versions that the user has permission to view. Note, if the user does not have permission to view the board, no versions will be returned at all. Returned versions are ordered by the name of the project from which they belong and then by sequence defined by user.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "epic",
      "item": [
        {
          "name": "Get issues without an epic",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/epic/none/issue",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "jql",
                  "value": "{{jql}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "validateQuery",
                  "value": "{{validateQuery}}",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "{{fields}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all issues that do not belong to any epic. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Remove issues from any epic",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/epic/none/issue",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Removes issues from epics. The user needs to have the edit issue permission for all issue they want to remove from epics. The maximum number of issues that can be moved in one operation is 50.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get an epic by id or key",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/epic/:epicIdOrKey",
              "query": [],
              "variable": [
                {
                  "key": "epicIdOrKey",
                  "value": "{{epicIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the epic for a given epic Id. This epic will only be returned if the user has permission to view it.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update an epic's details",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/epic/:epicIdOrKey",
              "query": [],
              "variable": [
                {
                  "key": "epicIdOrKey",
                  "value": "{{epicIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Performs a partial update of the epic. A partial update means that fields not present in the request JSON will not be updated. Valid values for color are color_1 to color_9.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get issues for a specific epic",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/epic/:epicIdOrKey/issue",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "jql",
                  "value": "{{jql}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "validateQuery",
                  "value": "{{validateQuery}}",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "{{fields}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "epicIdOrKey",
                  "value": "{{epicIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all issues that belong to the epic, for the given epic Id. This only includes issues that the user has permission to view. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic. By default, the returned issues are ordered by rank.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Move issues to a specific epic",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/epic/:epicIdOrKey/issue",
              "query": [],
              "variable": [
                {
                  "key": "epicIdOrKey",
                  "value": "{{epicIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Moves issues to an epic, for a given epic id. Issues can be only in a single epic at the same time. That means that already assigned issues to an epic, will not be assigned to the previous epic anymore. The user needs to have the edit issue permission for all issue they want to move and to the epic. The maximum number of issues that can be moved in one operation is 50.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Rank an epic relative to another",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/epic/:epicIdOrKey/rank",
              "query": [],
              "variable": [
                {
                  "key": "epicIdOrKey",
                  "value": "{{epicIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Moves (ranks) an epic before or after a given epic. If rankCustomFieldId is not defined, the default rank field will be used.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "issue",
      "item": [
        {
          "name": "Rank issues before or after a given issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/issue/rank",
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Moves (ranks) issues before or after a given issue. At most 50 issues may be ranked at once. This operation may fail for some issues, although this will be rare. In that case the 207 status code is returned for the whole response and detailed information regarding each issue is available in the response body. If rankCustomFieldId is not defined, the default rank field will be used.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get a single issue with Agile fields",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/issue/:issueIdOrKey",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "{{fields}}",
                  "disabled": true
                },
                {
                  "key": "updateHistory",
                  "value": "{{updateHistory}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a single issue, for a given issue Id or issue key. Issues returned from this resource include Agile fields, like sprint, closedSprints, flagged, and epic.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get the estimation of an issue for a board",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/issue/:issueIdOrKey/estimation",
              "query": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the estimation of the issue and a fieldId of the field that is used for it.\nOriginal time internally stores and returns the estimation as a number of seconds.\nThe field used for estimation on the given board can be obtained from board configuration resource.\nMore information about the field are returned by edit meta resource or field resource.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update the estimation of an issue for a board",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/issue/:issueIdOrKey/estimation",
              "query": [
                {
                  "key": "boardId",
                  "value": "{{boardId}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Updates the estimation of the issue. boardId param is required. This param determines which field will be updated on a issue.\nNote that this resource changes the estimation field of the issue regardless of appearance the field on the screen.\nOriginal time tracking estimation field accepts estimation in formats like \"1w\", \"2d\", \"3h\", \"20m\" or number which represent number of minutes.\nHowever, internally the field stores and returns the estimation as a number of seconds.\nThe field used for estimation on the given board can be obtained from board configuration resource.\nMore information about the field are returned by edit meta resource or field resource.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Create an issue or sub-task from json",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue",
              "query": [
                {
                  "key": "updateHistory",
                  "value": "{{updateHistory}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Creates an issue or a sub-task from a JSON representation.\nThe fields that can be set on create, in either the fields parameter or the update parameter can be determined using the /rest/api/2/issue/createmeta resource.\nIf a field is not configured to appear on the create screen, then it will not be in the createmeta, and a field\nvalidation error will occur if it is submitted.\nCreating a sub-task is similar to creating a regular issue, with two important differences:\n- the issueType field must correspond to a sub-task issue type (you can use /issue/createmeta to discover sub-task issue types), and\n- you must provide a parent field in the issue create request containing the id or key of the parent issue.\nThe updateHistory param adds the project that this issue is created in, to the current user's project history, if set to true (by default, the project history is not updated).\nYou can view the project history in the Jira application, via the Projects dropdown.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Archive list of issues",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/archive",
              "query": [
                {
                  "key": "notifyUsers",
                  "value": "{{notifyUsers}}",
                  "disabled": true,
                  "description": "Send the email with notification that the issue was updated to users that watch it. Admin or project admin permissions are required to disable the notification."
                }
              ],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "text/plain"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "text/plain"
              }
            ],
            "description": "Archives a list of issues.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw"
            }
          },
          "response": []
        },
        {
          "name": "Create an issue or sub-task from json - bulk operation.",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/bulk",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Creates issues or sub-tasks from a JSON representation. Creates many issues in one bulk operation.\nCreating a sub-task is similar to creating a regular issue. More details can be found in createIssue section.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get metadata for project issue types",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/createmeta/:projectIdOrKey/issuetypes",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true,
                  "description": "How many results on the page should be included"
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true,
                  "description": "The page offset"
                }
              ],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "description": "Project id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the metadata for issue types used for creating issues. Data will not be returned if the user does not have permission to create issues in that project.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get metadata for issue types used for creating issues",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/createmeta/:projectIdOrKey/issuetypes/:issueTypeId",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true,
                  "description": "How many results on the page should be included"
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true,
                  "description": "The page offset"
                }
              ],
              "variable": [
                {
                  "key": "issueTypeId",
                  "value": "{{issueTypeId}}",
                  "description": "Issue type id",
                  "disabled": false
                },
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "description": "Project id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the metadata for issue types used for creating issues. Data will not be returned if the user does not have permission to create issues in that project.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get suggested issues for auto-completion",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/picker",
              "query": [
                {
                  "key": "currentProjectId",
                  "value": "{{currentProjectId}}",
                  "disabled": true,
                  "description": "the id of the project in context of which the request is executed"
                },
                {
                  "key": "query",
                  "value": "{{query}}",
                  "disabled": true,
                  "description": "the query"
                },
                {
                  "key": "currentIssueKey",
                  "value": "{{currentIssueKey}}",
                  "disabled": true,
                  "description": "the key of the issue in context of which the request is executed"
                },
                {
                  "key": "showSubTasks",
                  "value": "{{showSubTasks}}",
                  "disabled": true,
                  "description": "if set to false, subtasks will not be included in the list"
                },
                {
                  "key": "currentJQL",
                  "value": "{{currentJQL}}",
                  "disabled": true,
                  "description": "the JQL in context of which the request is executed"
                },
                {
                  "key": "showSubTaskParent",
                  "value": "{{showSubTaskParent}}",
                  "disabled": true,
                  "description": "if set to false and request is executed in context of a subtask, the parent issue will not be included in the auto-completion result, even if it matches the query"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Get issue picker resource",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get issue for key",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true,
                  "description": "The expand param is used to include, hidden by default, parts of response. This can be used to include: renderedFields, names, schema, transitions, operations, editmeta, changelog, versionedRepresentations."
                },
                {
                  "key": "fields",
                  "value": "{{fields}}",
                  "disabled": true,
                  "description": "The list of fields to return for the issue. By default, all fields are returned."
                },
                {
                  "key": "updateHistory",
                  "value": "{{updateHistory}}",
                  "disabled": true,
                  "description": "The updateHistory param adds the issues retrieved by this method to the current user's issue history"
                },
                {
                  "key": "properties",
                  "value": "{{properties}}",
                  "disabled": true,
                  "description": "The list of properties to return for the issue. By default no properties are returned."
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a full representation of the issue for the given issue key.\nAn issue JSON consists of the issue key, a collection of fields,\na link to the workflow transition sub-resource, and (optionally) the HTML rendered values of any fields that support it\n(e.g. if wiki syntax is enabled for the description or comments).\nThe fields param (which can be specified multiple times) gives a comma-separated list of fields\nto include in the response. This can be used to retrieve a subset of fields.\nA particular field can be excluded by prefixing it with a minus.\nBy default, all (*all) fields are returned in this get-issue resource. Note: the default is different\nwhen doing a jql search -- the default there is just navigable fields (*navigable).\n- *all - include all fields\n- *navigable - include just navigable fields\n- summary,comment - include just the summary and comments\n- -comment - include everything except comments (the default is *all for get-issue)\n- *all,-comment - include everything except comments\n\nThe {@code properties} param is similar to {@code fields} and specifies a comma-separated list of issue\nproperties to include. Unlike {@code fields}, properties are not included by default. To include them all\nsend {@code ?properties=*all}. You can also include only specified properties or exclude some properties\nwith a minus (-) sign.\n\n- {@code *all} - include all properties\n- {@code *all, -prop1} - include all properties except {@code prop1}\n- {@code prop1, prop1} - include {@code prop1} and {@code prop2} properties\n\nJira will attempt to identify the issue by the issueIdOrKey path parameter. This can be an issue id,\nor an issue key. If the issue cannot be found via an exact match, Jira will also look for the issue in a case-insensitive way,\nby looking to see if the issue was moved. In either of these cases, the request will proceed as normal (a 302 or other redirect\nwill not be returned). The issue key contained in the response will indicate the current value of issue's key.\n\nThe expand param is used to include, hidden by default, parts of response. This can be used to include:\n\n- renderedFields - field values in HTML format\n- names - display name of each field\n- schema - schema for each field which describes a type of the field\n- transitions - all possible transitions for the given issue\n- operations - all possibles operations which may be applied on issue\n- editmeta - information about how each field may be edited. It contains field's schema as well.\n- changelog - history of all changes of the given issue\n- versionedRepresentations -\nREST representations of all fields. Some field may contain more recent versions. RESET representations are numbered.\nThe greatest number always represents the most recent version. It is recommended that the most recent version is used.\nversion for these fields which provide a more recent REST representation.\nAfter including versionedRepresentations \"fields\" field become hidden.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Edit an issue from a JSON representation",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey",
              "query": [
                {
                  "key": "notifyUsers",
                  "value": "{{notifyUsers}}",
                  "disabled": true,
                  "description": "Send the email with notification that the issue was updated to users that watch it. Admin or project admin permissions are required to disable the notification."
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Edits an issue from a JSON representation. The issue can either be updated by setting explicit the field value(s) or by using an operation to change the field value.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete an issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey",
              "query": [
                {
                  "key": "deleteSubtasks",
                  "value": "{{deleteSubtasks}}",
                  "disabled": true,
                  "description": "A String of true or false indicating that any subtasks should also be deleted. If the issue has no subtasks this parameter is ignored. If the issue has subtasks and this parameter is missing or false, then the issue will not be deleted and an error will be returned."
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes an issue. If the issue has subtasks you must set the parameter deleteSubtasks=true to delete the issue. You cannot delete an issue without its subtasks also being deleted.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Archive an issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/archive",
              "query": [
                {
                  "key": "notifyUsers",
                  "value": "{{notifyUsers}}",
                  "disabled": true,
                  "description": "Send the email with notification that the issue was updated to users that watch it. Admin or project admin permissions are required to disable the notification."
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "description": "Archives an issue.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Assign an issue to a user",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/assignee",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Assign an issue to a user.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Add one or more attachments to an issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/attachments",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Add one or more attachments to an issue.\nThis resource expects a multipart post. The media-type multipart/form-data is defined in RFC 1867. Most client libraries have classes that make dealing with multipart posts simple. For instance, in Java the Apache HTTP Components library provides a MultiPartEntity that makes it simple to submit a multipart POST.\nIn order to protect against XSRF attacks, because this method accepts multipart/form-data, it has XSRF protection\non it. This means you must submit a header of X-Atlassian-Token: no-check with the request, otherwise it will be blocked.\nThe name of the multipart/form-data parameter that contains attachments must be file.\nA simple example to upload a file called \"myfile.txt\" to issue REST-123:\ncurl -D- -u admin:admin -X POST -H \"X-Atlassian-Token: no-check\" -F \"file=@myfile.txt\" http://myhost/rest/api/2/issue/TEST-123/attachments",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw"
            }
          },
          "response": []
        },
        {
          "name": "Get comments for an issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/comment",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true,
                  "description": "Optional flags: renderedBody (provides body rendered in HTML)"
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true,
                  "description": "How many results on the page should be included. Defaults to 50."
                },
                {
                  "key": "orderBy",
                  "value": "{{orderBy}}",
                  "disabled": true,
                  "description": "Ordering of the results"
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true,
                  "description": "The page offset, if not specified then defaults to 0"
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all comments for an issue. Results can be ordered by the 'created' field which means the date a comment was added.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Add a comment",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/comment",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true,
                  "description": "Optional flags: renderedBody (provides body rendered in HTML)"
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Adds a new comment to an issue.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get a comment by id",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/comment/:id",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true,
                  "description": "Optional flags: renderedBody (provides body rendered in HTML)"
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "Comment id",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a single comment.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update a comment",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/comment/:id",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true,
                  "description": "Optional flags: renderedBody (provides body rendered in HTML)"
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "Comment id",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Updates an existing comment using its JSON representation.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a comment",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/comment/:id",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "Comment id",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes an existing comment.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Pin a comment",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/comment/:id/pin",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "Comment id",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Pins a comment to the top of the comment list.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get metadata for issue types used for editing issues",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/editmeta",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the meta data for editing an issue. The fields in the editmeta correspond to the fields in the edit screen for the issue. Fields not in the screen will not be in the editmeta.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Send notification to recipients",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/notify",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Sends a notification (email) to the list or recipients defined in the request.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get pinned comments for an issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/pinned-comments",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all pinned to the issue comments.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get keys of all properties for an issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/properties",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the keys of all properties for the issue identified by the key or by the id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get the value of a specific property from an issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "description": "The key of the property to return",
                  "disabled": false
                },
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the value of the property with a given key from the issue identified by the key or by the id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update the value of a specific issue's property",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "description": "The key of the issue's property",
                  "disabled": false
                },
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Sets the value of the specified issue's property.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a property from an issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "description": "The key of the property to remove",
                  "disabled": false
                },
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes the property from the issue identified by the key or by the id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get remote issue links for an issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/remotelink",
              "query": [
                {
                  "key": "globalId",
                  "value": "{{globalId}}",
                  "disabled": true,
                  "description": "Global id of the remote issue link"
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Get remote issue links for an issue.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create or update remote issue link",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/remotelink",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Creates or updates a remote issue link from a JSON representation. If a globalId is provided and a remote issue link exists with that globalId, the remote issue link is updated. Otherwise, the remote issue link is created.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete remote issue link",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/remotelink",
              "query": [
                {
                  "key": "globalId",
                  "value": "{{globalId}}",
                  "disabled": false,
                  "description": "Global id of the remote issue link"
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Delete the remote issue link with the given global id on the issue.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get a remote issue link by its id",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/remotelink/:linkId",
              "query": [],
              "variable": [
                {
                  "key": "linkId",
                  "value": "{{linkId}}",
                  "description": "Id of the remote issue link",
                  "disabled": false
                },
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Get a remote issue link by its id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update remote issue link",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/remotelink/:linkId",
              "query": [],
              "variable": [
                {
                  "key": "linkId",
                  "value": "{{linkId}}",
                  "description": "Id of the remote issue link",
                  "disabled": false
                },
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Updates a remote issue link from a JSON representation. Any fields not provided are set to null.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete remote issue link by id",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/remotelink/:linkId",
              "query": [],
              "variable": [
                {
                  "key": "linkId",
                  "value": "{{linkId}}",
                  "description": "Id of the remote issue link",
                  "disabled": false
                },
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Delete the remote issue link with the given id on the issue.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Restore an archived issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/restore",
              "query": [
                {
                  "key": "notifyUsers",
                  "value": "{{notifyUsers}}",
                  "disabled": true,
                  "description": "Send the email with notification that the issue was updated to users that watch it. Admin or project admin permissions are required to disable the notification."
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "description": "Restores an archived issue.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get an issue's subtask list",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/subtask",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "The parent issue's key or id",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns an issue's subtask list",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Check if a subtask can be moved",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/subtask/move",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "The parent issue's key or id",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Checks if a subtask can be moved",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Reorder an issue's subtasks",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/subtask/move",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "The parent issue's key or id",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Reorders an issue's subtasks by moving the subtask at index 'from' to index 'to'.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get list of transitions possible for an issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/transitions",
              "query": [
                {
                  "key": "transitionId",
                  "value": "{{transitionId}}",
                  "disabled": true,
                  "description": "Transition id"
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Get a list of the transitions possible for this issue by the current user, along with fields that are required and their types.\nFields will only be returned if `expand=transitions.fields`.\nThe fields in the metadata correspond to the fields in the transition screen for that transition.\nFields not in the screen will not be in the metadata.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Perform a transition on an issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/transitions",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Perform a transition on an issue.\nWhen performing the transition you can update or set other issue fields.\nThe fields that can be set on transition, in either the fields parameter or the update parameter can be determined using the /rest/api/2/issue/{issueIdOrKey}/transitions?expand=transitions.fields resource.\nIf a field is not configured to appear on the transition screen, then it will not be in the transition metadata, and a field validation error will occur if it is submitted.\nThe updateHistory param adds the issues retrieved by this method to the current user's issue history, if set to true (by default, the issue history does not include issues retrieved via the REST API).\nYou can view the issue history in the Jira application, via the Issues dropdown or by using the lastViewed JQL field in an issue search.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get votes for issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/votes",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "A REST sub-resource representing the voters on the issue.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Add vote to issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/votes",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id.",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [],
            "description": "Adds voter (currently logged user) to particular ticket. You need to be logged in to use this method.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Remove vote from issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/votes",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Remove your vote from an issue.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get list of watchers of issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/watchers",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the list of watchers for the issue with the given key.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Add a user as watcher",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/watchers",
              "query": [
                {
                  "key": "userName",
                  "value": "{{userName}}",
                  "disabled": true,
                  "description": "The name of the user to add to the watcher list. If no name is specified, the current user is added."
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Adds a user to an issue's watcher list.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete watcher from issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/watchers",
              "query": [
                {
                  "key": "userName",
                  "value": "{{userName}}",
                  "disabled": true,
                  "description": "The name of the user to remove from the watcher list."
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes a user from an issue's watcher list.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get worklogs for an issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/worklog",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all work logs for an issue. Work logs won't be returned if the Log work field is hidden for the project.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Add a worklog entry",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/worklog",
              "query": [
                {
                  "key": "newEstimate",
                  "value": "{{newEstimate}}",
                  "disabled": true,
                  "description": "Required when 'new' is selected for adjustEstimate. e.g. \"2d\""
                },
                {
                  "key": "adjustEstimate",
                  "value": "{{adjustEstimate}}",
                  "disabled": true,
                  "description": "Allows you to provide specific instructions to update the remaining time estimate of the issue. Valid values are: new, leave, manual, auto"
                },
                {
                  "key": "reduceBy",
                  "value": "{{reduceBy}}",
                  "disabled": true,
                  "description": "Required when 'manual' is selected for adjustEstimate. e.g. \"2d\""
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "a string containing the issue id or key the worklog will be added to",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Adds a new worklog entry to an issue.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get a worklog by id",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/worklog/:id",
              "query": [],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "Issue id or key",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "Worklog id",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a specific worklog. The work log won't be returned if the Log work field is hidden for the project.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update a worklog entry",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/worklog/:id",
              "query": [
                {
                  "key": "newEstimate",
                  "value": "{{newEstimate}}",
                  "disabled": true,
                  "description": "required when 'new' is selected for adjustEstimate"
                },
                {
                  "key": "adjustEstimate",
                  "value": "{{adjustEstimate}}",
                  "disabled": true,
                  "description": "allows you to provide specific instructions to update the remaining time estimate of the issue. Valid values are: new, leave, auto"
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "a string containing the issue id or key the worklog belongs to",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "id of the worklog to be updated",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Updates an existing worklog entry. Note that:\n- Fields possible for editing are: comment, visibility, started, timeSpent and timeSpentSeconds.\n- Either timeSpent or timeSpentSeconds can be set.\n- Fields which are not set will not be updated.\n- For a request to be valid, it has to have at least one field change.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a worklog entry",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issue/:issueIdOrKey/worklog/:id",
              "query": [
                {
                  "key": "newEstimate",
                  "value": "{{newEstimate}}",
                  "disabled": true,
                  "description": "Required when 'new' is selected for adjustEstimate. e.g. \"2d\""
                },
                {
                  "key": "adjustEstimate",
                  "value": "{{adjustEstimate}}",
                  "disabled": true,
                  "description": "Allows you to provide specific instructions to update the remaining time estimate of the issue. Valid values are: new, leave, manual, auto"
                },
                {
                  "key": "increaseBy",
                  "value": "{{increaseBy}}",
                  "disabled": true,
                  "description": "Required when 'manual' is selected for adjustEstimate. e.g. \"2d\""
                }
              ],
              "variable": [
                {
                  "key": "issueIdOrKey",
                  "value": "{{issueIdOrKey}}",
                  "description": "a string containing the issue id or key the worklog belongs to",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "Id of the worklog to be deleted",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes an existing worklog entry.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "sprint",
      "item": [
        {
          "name": "Create a future sprint",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Creates a future sprint. Sprint name and origin board id are required. Start and end date are optional. Notes: The sprint name is trimmed. Only Jira administrators can create synced sprints.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Unmap sprints from being synced",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint/unmap",
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Sets the Synced flag to false for all sprints in the provided list.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Unmap all sprints from being synced",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint/unmap-all",
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "header": [],
            "description": "Sets the Synced flag to false for all sprints on this Jira instance. This operation is intended for cleanup only. It is highly destructive and not reversible. Use with caution.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get sprint by id",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint/:sprintId",
              "query": [],
              "variable": [
                {
                  "key": "sprintId",
                  "value": "{{sprintId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a single sprint, for a given sprint Id. The sprint will only be returned if the user can view the board that the sprint was created on, or view at least one of the issues in the sprint.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update a sprint fully",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint/:sprintId",
              "query": [],
              "variable": [
                {
                  "key": "sprintId",
                  "value": "{{sprintId}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Performs a full update of a sprint.\nA full update means that the result will be exactly the same as the request body.\nAny fields not present in the request JSON will be set to null.\nNotes:\n- Sprints that are in a closed state cannot be updated.\n- A sprint can be started by updating the state to 'active'. This requires the sprint to be in the 'future' state and have a startDate and endDate set.\n- A sprint can be completed by updating the state to 'closed'. This action requires the sprint to be in the 'active' state. This sets the completeDate to the time of the request.\n- Other changes to state are not allowed.\n- The completeDate field cannot be updated manually.\n- Only Jira administrators can edit dates on sprints that are marked as synced.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Partially update a sprint",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint/:sprintId",
              "query": [],
              "variable": [
                {
                  "key": "sprintId",
                  "value": "{{sprintId}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Performs a partial update of a sprint.\nA partial update means that fields not present in the request JSON will not be updated.\nNotes:\n- Sprints that are in a closed state cannot be updated.\n- A sprint can be started by updating the state to 'active'. This requires the sprint to be in the 'future' state and have a startDate and endDate set.\n- A sprint can be completed by updating the state to 'closed'. This action requires the sprint to be in the 'active' state. This sets the completeDate to the time of the request.\n- Other changes to state are not allowed.\n- The completeDate field cannot be updated manually.\n- Sprint goal can be removed by updating it's value to empty string\n- Only Jira administrators can edit dates on sprints that are marked as synced.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a sprint",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint/:sprintId",
              "query": [],
              "variable": [
                {
                  "key": "sprintId",
                  "value": "{{sprintId}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes a sprint. Once a sprint is deleted, all issues in the sprint will be moved to the backlog. To delete a synced sprint, you must unsync it first.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all issues in a sprint",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint/:sprintId/issue",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "jql",
                  "value": "{{jql}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "validateQuery",
                  "value": "{{validateQuery}}",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "{{fields}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "sprintId",
                  "value": "{{sprintId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all issues in a sprint, for a given sprint Id. This only includes issues that the user has permission to view. By default, the returned issues are ordered by rank.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Move issues to a sprint",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint/:sprintId/issue",
              "query": [],
              "variable": [
                {
                  "key": "sprintId",
                  "value": "{{sprintId}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Moves issues to a sprint, for a given sprint Id. Issues can only be moved to open or active sprints. The maximum number of issues that can be moved in one operation is 50.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get all properties keys for a sprint",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint/:sprintId/properties",
              "query": [],
              "variable": [
                {
                  "key": "sprintId",
                  "value": "{{sprintId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the keys of all properties for the sprint identified by the id. The user who retrieves the property keys is required to have permissions to view the sprint.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get a property for a sprint",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint/:sprintId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "disabled": false
                },
                {
                  "key": "sprintId",
                  "value": "{{sprintId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the value of the property with a given key from the sprint identified by the provided id. The user who retrieves the property is required to have permissions to view the sprint.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update a sprint's property",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint/:sprintId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "disabled": false
                },
                {
                  "key": "sprintId",
                  "value": "{{sprintId}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "description": "Sets the value of the specified sprint's property. You can use this resource to store a custom data against the sprint identified by the id. The user who stores the data is required to have permissions to modify the sprint.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Delete a sprint's property",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint/:sprintId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "disabled": false
                },
                {
                  "key": "sprintId",
                  "value": "{{sprintId}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes the property from the sprint identified by the id. Ths user removing the property is required to have permissions to modify the sprint.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Swap the position of two sprints",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}agile/1.0/sprint/:sprintId/swap",
              "query": [],
              "variable": [
                {
                  "key": "sprintId",
                  "value": "{{sprintId}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Swap the position of the sprint with the second sprint.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "application-properties",
      "item": [
        {
          "name": "Get an application property by key",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/application-properties",
              "query": [
                {
                  "key": "permissionLevel",
                  "value": "{{permissionLevel}}",
                  "disabled": false,
                  "description": "when fetching a list specifies the permission level of all items in the list\nsee {@link com.atlassian.jira.bc.admin.ApplicationPropertiesService.EditPermissionLevel}"
                },
                {
                  "key": "keyFilter",
                  "value": "{{keyFilter}}",
                  "disabled": true,
                  "description": "when fetching a list allows the list to be filtered by the property's start of key\ne.g. \"jira.lf.*\" whould fetch only those permissions that are editable and whose keys start with\n     *                        \"jira.lf.\". This is a regex."
                },
                {
                  "key": "key",
                  "value": "{{key}}",
                  "disabled": false,
                  "description": "a String containing the property key."
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns an application property.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all advanced settings properties",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/application-properties/advanced-settings",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the properties that are displayed on the \"General Configuration > Advanced Settings\" page.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update an application property",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/application-properties/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "a String containing the property key.",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Update an application property via PUT. The \"value\" field present in the PUT will override the existing value.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "applicationrole",
      "item": [
        {
          "name": "Get all application roles in the system",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/applicationrole",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all application roles in the system.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update application roles",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/applicationrole",
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "key": "If-Match",
                "value": "{{If-Match}}",
                "disabled": true
              },
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Updates the ApplicationRoles with the passed data if the version hash is the same as the server. Only the groups and default groups setting of the role may be updated. Requests to change the key or the name of the role will be silently ignored. It is acceptable to pass only the roles that are updated as roles that are present in the server but not in data to update with, will not be deleted.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get application role by key",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/applicationrole/:key",
              "query": [],
              "variable": [
                {
                  "key": "key",
                  "value": "{{key}}",
                  "description": "the key of the role to use.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the ApplicationRole with passed key if it exists.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update application role",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/applicationrole/:key",
              "query": [],
              "variable": [
                {
                  "key": "key",
                  "value": "{{key}}",
                  "description": "the key of the role to update.",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "key": "If-Match",
                "value": "{{If-Match}}",
                "disabled": true
              },
              {
                "key": "versionHash",
                "value": "{{versionHash}}",
                "description": "the hash of the version to update. Optional Param",
                "disabled": true
              },
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Updates the ApplicationRole with the passed data. Only the groups and default groups setting of the role may be updated. Requests to change the key or the name of the role will be silently ignored.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "attachment",
      "item": [
        {
          "name": "Get attachment capabilities",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/attachment/meta",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the meta information for an attachments, specifically if they are enabled and the maximum upload size allowed.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get the meta-data for an attachment, including the URI of the actual attached file",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/attachment/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "id of the attachment to view",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the meta-data for an attachment, including the URI of the actual attached file.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Delete an attachment from an issue",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/attachment/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "id of the attachment to remove",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Remove an attachment from an issue.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get human-readable attachment expansion",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/attachment/:id/expand/human",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "the id of the attachment to expand.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Tries to expand an attachment. Output is human-readable and subject to change.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get raw attachment expansion",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/attachment/:id/expand/raw",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "the id of the attachment to expand.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Tries to expand an attachment. Output is raw and should be backwards-compatible through the course of time.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "avatar",
      "item": [
        {
          "name": "Get all system avatars",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/avatar/:type/system",
              "query": [],
              "variable": [
                {
                  "key": "type",
                  "value": "{{type}}",
                  "description": "the avatar type",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all system avatars of the given type.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create temporary avatar",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/avatar/:type/temporary",
              "query": [
                {
                  "key": "filename",
                  "value": "{{filename}}",
                  "disabled": true,
                  "description": "name of file being uploaded"
                },
                {
                  "key": "size",
                  "value": "{{size}}",
                  "disabled": true,
                  "description": "size of file"
                }
              ],
              "variable": [
                {
                  "key": "type",
                  "value": "{{type}}",
                  "description": "the avatar type",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [],
            "description": "Creates temporary avatar",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update avatar cropping",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/avatar/:type/temporaryCrop",
              "query": [],
              "variable": [
                {
                  "key": "type",
                  "value": "{{type}}",
                  "description": "the avatar type",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Updates the cropping instructions of the temporary avatar",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "cluster",
      "item": [
        {
          "name": "Request node index snapshot",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/cluster/index-snapshot/:nodeId",
              "query": [],
              "variable": [
                {
                  "key": "nodeId",
                  "value": "{{nodeId}}",
                  "description": "ID of the node to request index from",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "description": "Request current index from node (the request is processed asynchronously)",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Delete a cluster node",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/cluster/node/:nodeId",
              "query": [],
              "variable": [
                {
                  "key": "nodeId",
                  "value": "{{nodeId}}",
                  "description": "ID of the node to delete",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Delete the node from the cluster if state of node is OFFLINE.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update node state to offline",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/cluster/node/:nodeId/offline",
              "query": [],
              "variable": [
                {
                  "key": "nodeId",
                  "value": "{{nodeId}}",
                  "description": "ID of the node to change state",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "description": "Change the node's state to offline if the node is reporting as active, but is not alive.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all cluster nodes",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/cluster/nodes",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all nodes in cluster.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Approve cluster upgrade",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/cluster/zdu/approve",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [],
            "description": "Approves the cluster upgrade.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Cancel cluster upgrade",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/cluster/zdu/cancel",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [],
            "description": "Cancels the ongoing cluster upgrade.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Retry cluster upgrade",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/cluster/zdu/retryUpgrade",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [],
            "description": "Retries the cluster upgrade.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Start cluster upgrade",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/cluster/zdu/start",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [],
            "description": "Starts the cluster upgrade.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get cluster upgrade state",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/cluster/zdu/state",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the current state of the cluster upgrade.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "comment",
      "item": [
        {
          "name": "Get properties keys of a comment",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/comment/:commentId/properties",
              "query": [],
              "variable": [
                {
                  "key": "commentId",
                  "value": "{{commentId}}",
                  "description": "the comment from which keys will be returned.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the keys of all properties for the comment identified by the key or by the id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get a property from a comment",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/comment/:commentId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "description": "the key of the property to return.",
                  "disabled": false
                },
                {
                  "key": "commentId",
                  "value": "{{commentId}}",
                  "description": "the comment from which the property will be returned.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the value of the property with a given key from the comment identified by the key or by the id. The user who retrieves the property is required to have permissions to read the comment.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Set a property on a comment",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/comment/:commentId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "description": "the key of the comment's property. The maximum length of the key is 255 bytes.",
                  "disabled": false
                },
                {
                  "key": "commentId",
                  "value": "{{commentId}}",
                  "description": "the comment on which the property will be set.",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Sets the value of the specified comment's property.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a property from a comment",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/comment/:commentId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "description": "the key of the property to remove.",
                  "disabled": false
                },
                {
                  "key": "commentId",
                  "value": "{{commentId}}",
                  "description": "the comment from which the property will be removed.",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes the property from the comment identified by the key or by the id. Ths user removing the property is required to have permissions to administer the comment.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "component",
      "item": [
        {
          "name": "Create component",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/component",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Create a component via POST.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get paginated components",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/component/page",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true,
                  "description": "the maximum number of components to return"
                },
                {
                  "key": "query",
                  "value": "{{query}}",
                  "disabled": true,
                  "description": "the string that components names will be matched with"
                },
                {
                  "key": "projectIds",
                  "value": "{{projectIds}}",
                  "disabled": true,
                  "description": "the set of project ids to filter components"
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true,
                  "description": "the index of the first components to return"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns paginated list of filtered active components",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get project component",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/component/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "a String containing the component key",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a project component.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update a component",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/component/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The component to delete.",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Modify a component via PUT. Any fields present in the PUT will override existing values. As a convenience, if a field is not present, it is silently ignored.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a project component",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/component/:id",
              "query": [
                {
                  "key": "moveIssuesTo",
                  "value": "{{moveIssuesTo}}",
                  "disabled": true,
                  "description": "The new component applied to issues whose 'id' component will be deleted. If this value is null, then the 'id' component is simply removed from the related isues."
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The component to delete.",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Delete a project component.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get component related issues",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/component/:id/relatedIssueCounts",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "a String containing the component id",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns counts of issues related to this component.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "configuration",
      "item": [
        {
          "name": "Get Jira configuration details",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/configuration",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the information if the optional features in Jira are enabled or disabled. If the time tracking is enabled, it also returns the detailed information about time tracking configuration.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "customFieldOption",
      "item": [
        {
          "name": "Get custom field option by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/customFieldOption/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "a String containing an Custom Field Option id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a full representation of the Custom Field Option that has the given id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "customFields",
      "item": [
        {
          "name": "Get custom fields with pagination",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/customFields",
              "query": [
                {
                  "key": "sortColumn",
                  "value": "{{sortColumn}}",
                  "disabled": true,
                  "description": "The column by which to sort the returned custom fields."
                },
                {
                  "key": "types",
                  "value": "{{types}}",
                  "disabled": true,
                  "description": "A list of custom field types to filter the custom fields."
                },
                {
                  "key": "search",
                  "value": "{{search}}",
                  "disabled": true,
                  "description": "A query string used to search custom fields."
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true,
                  "description": "The maximum number of custom fields to return."
                },
                {
                  "key": "sortOrder",
                  "value": "{{sortOrder}}",
                  "disabled": true,
                  "description": "The order in which to sort the returned custom fields."
                },
                {
                  "key": "screenIds",
                  "value": "{{screenIds}}",
                  "disabled": true,
                  "description": "A list of screen IDs to filter the custom fields."
                },
                {
                  "key": "lastValueUpdate",
                  "value": "{{lastValueUpdate}}",
                  "disabled": true,
                  "description": "The last value update to filter the custom fields."
                },
                {
                  "key": "projectIds",
                  "value": "{{projectIds}}",
                  "disabled": true,
                  "description": "A list of project IDs to filter the custom fields."
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true,
                  "description": "The starting index of the returned custom fields."
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of Custom Fields in the given range.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Delete custom fields in bulk",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/customFields",
              "query": [
                {
                  "key": "ids",
                  "value": "{{ids}}",
                  "disabled": false,
                  "description": "A list of custom field IDs to delete."
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Deletes custom fields in bulk.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get custom field options",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/customFields/:customFieldId/options",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true,
                  "description": "The maximum number of results to return."
                },
                {
                  "key": "issueTypeIds",
                  "value": "{{issueTypeIds}}",
                  "disabled": true,
                  "description": "A list of issue type IDs in a context."
                },
                {
                  "key": "query",
                  "value": "{{query}}",
                  "disabled": true,
                  "description": "A string used to filter options."
                },
                {
                  "key": "page",
                  "value": "{{page}}",
                  "disabled": true,
                  "description": "The page of options to return."
                },
                {
                  "key": "projectIds",
                  "value": "{{projectIds}}",
                  "disabled": true,
                  "description": "A list of project IDs in a context."
                }
              ],
              "variable": [
                {
                  "key": "customFieldId",
                  "value": "{{customFieldId}}",
                  "description": "The ID of the custom field.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns custom field's options defined in a given context composed of projects and issue types.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "dashboard",
      "item": [
        {
          "name": "Get all dashboards with optional filtering",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/dashboard",
              "query": [
                {
                  "key": "filter",
                  "value": "{{filter}}",
                  "disabled": true,
                  "description": "An optional filter that is applied to the list of dashboards."
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true,
                  "description": "A hint as to the maximum number of dashboards to return in each call."
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true,
                  "description": "The index of the first dashboard to return (0-based)."
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of all dashboards, optionally filtering them.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all properties keys for a dashboard item",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/dashboard/:dashboardId/items/:itemId/properties",
              "query": [],
              "variable": [
                {
                  "key": "itemId",
                  "value": "{{itemId}}",
                  "description": "The dashboard item from which keys will be returned.",
                  "disabled": false
                },
                {
                  "key": "dashboardId",
                  "value": "{{dashboardId}}",
                  "description": "The dashboard id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the keys of all properties for the dashboard item identified by the id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get a property from a dashboard item",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/dashboard/:dashboardId/items/:itemId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "description": "The key of the property to return.",
                  "disabled": false
                },
                {
                  "key": "itemId",
                  "value": "{{itemId}}",
                  "description": "The dashboard item from which the property will be returned.",
                  "disabled": false
                },
                {
                  "key": "dashboardId",
                  "value": "{{dashboardId}}",
                  "description": "The dashboard id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the value of the property with a given key from the dashboard item identified by the id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Set a property on a dashboard item",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/dashboard/:dashboardId/items/:itemId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "description": "The key of the dashboard item's property. The maximum length of the key is 255 bytes.",
                  "disabled": false
                },
                {
                  "key": "itemId",
                  "value": "{{itemId}}",
                  "description": "The dashboard item on which the property will be set.",
                  "disabled": false
                },
                {
                  "key": "dashboardId",
                  "value": "{{dashboardId}}",
                  "description": "The dashboard id.",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "description": "Sets the value of the property with a given key on the dashboard item identified by the id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Delete a property from a dashboard item",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/dashboard/:dashboardId/items/:itemId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "description": "The key of the property to remove.",
                  "disabled": false
                },
                {
                  "key": "itemId",
                  "value": "{{itemId}}",
                  "description": "The dashboard item from which the property will be removed.",
                  "disabled": false
                },
                {
                  "key": "dashboardId",
                  "value": "{{dashboardId}}",
                  "description": "The dashboard id.",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes the property from the dashboard item identified by the key or by the id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get a single dashboard by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/dashboard/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The dashboard id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a single dashboard.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "email-templates",
      "item": [
        {
          "name": "Get email templates as zip file",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/email-templates",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [],
            "description": "Creates a zip file containing email templates at local home and returns the file.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update email templates with zip file",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/email-templates",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/zip"
              }
            ],
            "description": "Extracts given zip file to temporary templates folder. If the folder already exists it will replace it's content",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw"
            }
          },
          "response": []
        },
        {
          "name": "Update email templates with previously uploaded pack",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/email-templates/apply",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [],
            "description": "Replaces the current email templates pack with previously uploaded one, if exists.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update email templates to default",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/email-templates/revert",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [],
            "description": "Replaces the current email templates pack with default templates, which are copied over from Jira binaries.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get email types for templates",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/email-templates/types",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [],
            "description": "Returns a list of root templates mapped with Event Types. The list can be used to decide which test emails to send.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "field",
      "item": [
        {
          "name": "Get all fields, both System and Custom",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/field",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of all fields, both System and Custom",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create a custom field using a definition",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/field",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Creates a custom field using a definition",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "filter",
      "item": [
        {
          "name": "Create a new filter",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Creates a new filter, and returns newly created filter. Currently sets permissions just using the users default sharing permissions",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get default share scope",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter/defaultShareScope",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the default share scope of the logged-in user",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Set default share scope",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter/defaultShareScope",
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Sets the default share scope of the logged-in user. Available values are: AUTHENTICATED (for sharing with all logged-in users) and PRIVATE (for no shares).",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get favourite filters",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter/favourite",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the favourite filters of the logged-in user",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get a filter by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter/:id",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The filter id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a filter given an id",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update an existing filter",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter/:id",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The filter id.",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Updates an existing filter, and returns its new value. The following properties of a filter can be updated: 'jql', 'name', 'description'. Additionally, administrators can also update the 'owner' field. To get, set or unset 'favourite', use rest/api/1.0/filters/{id}/favourite with GET, PUT and DELETE methods instead.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a filter",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The ID of the filter to delete.",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Delete a filter",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get default columns for filter",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter/:id/columns",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The filter id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the default columns for the given filter. Currently logged in user will be used as the user making such request.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Set default columns for filter",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter/:id/columns",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The filter id.",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "*/*"
              }
            ],
            "description": "Sets the default columns for the given filter",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw"
            }
          },
          "response": []
        },
        {
          "name": "Reset columns for filter",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter/:id/columns",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The filter id.",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Resets the columns for the given filter such that the filter no longer has its own column config",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all share permissions of filter",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter/:id/permission",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The filter id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all share permissions of the given filter",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Add share permissions to filter",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter/:id/permission",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The filter id.",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Adds a share permissions to the given filter. Adding a global permission removes all previous permissions from the filter",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Remove share permissions from filter",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter/:id/permission/:permission-id",
              "query": [],
              "variable": [
                {
                  "key": "permissionId",
                  "value": "{{permissionId}}",
                  "description": "The permission id.",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The filter id.",
                  "disabled": false
                },
                {
                  "key": "permission-id",
                  "value": "{{permission-id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes a share permissions from the given filter",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get a single share permission of filter",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/filter/:id/permission/:permissionId",
              "query": [],
              "variable": [
                {
                  "key": "permissionId",
                  "value": "{{permissionId}}",
                  "description": "The permission id.",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The filter id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a single share permission of the given filter",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "group",
      "item": [
        {
          "name": "Create a group with given parameters",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/group",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Creates a group by given group parameter",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a specified group",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/group",
              "query": [
                {
                  "key": "groupname",
                  "value": "{{groupname}}",
                  "disabled": false,
                  "description": "The name of the group to delete."
                },
                {
                  "key": "swapGroup",
                  "value": "{{swapGroup}}",
                  "disabled": true,
                  "description": "A different group to transfer the restrictions to."
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes a group by given group parameter",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get users from a specified group",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/group/member",
              "query": [
                {
                  "key": "includeInactiveUsers",
                  "value": "{{includeInactiveUsers}}",
                  "disabled": true,
                  "description": "Include inactive users."
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true,
                  "description": "The maximum number of users to return."
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true,
                  "description": "The index of the first user in group to return."
                }
              ],
              "variable": [
                {
                  "key": "groupname",
                  "value": "{{groupname}}",
                  "description": "The group name.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a paginated list of users who are members of the specified group and its subgroups",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Add a user to a specified group",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/group/user",
              "query": [
                {
                  "key": "groupname",
                  "value": "{{groupname}}",
                  "disabled": false,
                  "description": "A name of requested group."
                }
              ],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Adds given user to a group",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Remove a user from a specified group",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/group/user",
              "query": [
                {
                  "key": "groupname",
                  "value": "{{groupname}}",
                  "disabled": false,
                  "description": "A name of requested group."
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": false,
                  "description": "User to remove from a group"
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes given user from a group",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "groups",
      "item": [
        {
          "name": "Get groups matching a query",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/groups/picker",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true,
                  "description": "Maximum number of results to return"
                },
                {
                  "key": "query",
                  "value": "{{query}}",
                  "disabled": true,
                  "description": "A String to match groups against"
                },
                {
                  "key": "exclude",
                  "value": "{{exclude}}",
                  "disabled": true,
                  "description": "List of groups to exclude"
                },
                {
                  "key": "userName",
                  "value": "{{userName}}",
                  "disabled": true,
                  "description": "Username for the context"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns groups with substrings matching a given query",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "groupuserpicker",
      "item": [
        {
          "name": "Get users and groups matching query with highlighting",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/groupuserpicker",
              "query": [
                {
                  "key": "issueTypeId",
                  "value": "{{issueTypeId}}",
                  "disabled": true,
                  "description": "The list of issue type ids to further restrict the search"
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true,
                  "description": "The maximum number of users to return"
                },
                {
                  "key": "query",
                  "value": "{{query}}",
                  "disabled": true,
                  "description": "A string used to search username, Name or e-mail address"
                },
                {
                  "key": "showAvatar",
                  "value": "{{showAvatar}}",
                  "disabled": true,
                  "description": "Show avatar"
                },
                {
                  "key": "projectId",
                  "value": "{{projectId}}",
                  "disabled": true,
                  "description": "The list of project ids to further restrict the search"
                },
                {
                  "key": "fieldId",
                  "value": "{{fieldId}}",
                  "disabled": true,
                  "description": "The custom field id"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of users and groups matching query with highlighting",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "index-snapshot",
      "item": [
        {
          "name": "Get list of available index snapshots",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/index-snapshot",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Lists available index snapshots absolute paths with timestamps",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create index snapshot if not in progress",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/index-snapshot",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [],
            "description": "Starts taking an index snapshot if no other snapshot creation process is in progress",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get index snapshot creation status",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/index-snapshot/isRunning",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Checks if index snapshot creation is currently running",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "index",
      "item": [
        {
          "name": "Get index condition summary",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/index/summary",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a summary of the index condition of the current node.\nThe returned data consists of:\n- `nodeId` - Node identifier.\n- `reportTime` - Time of this report creation.\n- `issueIndex` - Summary of the issue index status.\n- `replicationQueues` - Map of index replication queues, where keys represent nodes from which replication operations came from.\n\n`issueIndex` can contain:\n    - `indexReadable` - If `false` the endpoint failed to read data from the issue index (check Jira logs for detailed stack trace), otherwise `true`.\n    - `countInDatabase` - Count of issues found in the database.\n    - `countInIndex` - Count of issues found while querying the index.\n    - `lastUpdatedInDatabase` - Time of the last update of the issue found in the database.\n    - `lastUpdatedInIndex` - Time of the last update of the issue found while querying the index.\n`replicationQueues`'s map values can contain:\n    - `lastConsumedOperation` - Last executed index replication operation by the current node from the sending node's queue.\n    - `lastConsumedOperation.id` - Identifier of the operation.\n    - `lastConsumedOperation.replicationTime` - Time when the operation was sent to other nodes.\n    - `lastOperationInQueue` - Last index replication operation in the sending node's queue.\n    - `lastOperationInQueue.id` - Identifier of the operation.\n    - `lastOperationInQueue.replicationTime` - Time when the operation was sent to other nodes.\n    - `queueSize` - Number of operations in the queue from the sending node to the current node.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "issueLink",
      "item": [
        {
          "name": "Create an issue link between two issues",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issueLink",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Creates an issue link between two issues.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get an issue link with the specified id",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issueLink/:linkId",
              "query": [],
              "variable": [
                {
                  "key": "linkId",
                  "value": "{{linkId}}",
                  "description": "The issue link id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns an issue link with the specified id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Delete an issue link with the specified id",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issueLink/:linkId",
              "query": [],
              "variable": [
                {
                  "key": "linkId",
                  "value": "{{linkId}}",
                  "description": "The issue link id.",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes an issue link with the specified id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "issueLinkType",
      "item": [
        {
          "name": "Get list of available issue link types",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issueLinkType",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of available issue link types, if issue linking is enabled.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create a new issue link type",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issueLinkType",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Create a new issue link type.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get information about an issue link type",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issueLinkType/:issueLinkTypeId",
              "query": [],
              "variable": [
                {
                  "key": "issueLinkTypeId",
                  "value": "{{issueLinkTypeId}}",
                  "description": "The issue link type id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns for a given issue link type id all information about this issue link type.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update the specified issue link type",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issueLinkType/:issueLinkTypeId",
              "query": [],
              "variable": [
                {
                  "key": "issueLinkTypeId",
                  "value": "{{issueLinkTypeId}}",
                  "description": "The issue link type id.",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Update the specified issue link type.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete the specified issue link type",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issueLinkType/:issueLinkTypeId",
              "query": [],
              "variable": [
                {
                  "key": "issueLinkTypeId",
                  "value": "{{issueLinkTypeId}}",
                  "description": "The issue link type id.",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Delete the specified issue link type.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "issuesecurityschemes",
      "item": [
        {
          "name": "Get all issue security schemes",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuesecurityschemes",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all issue security schemes that are defined.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get specific issue security scheme by id",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuesecurityschemes/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The issue security scheme id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the issue security scheme along with that are defined.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "issuetype",
      "item": [
        {
          "name": "Get list of all issue types visible to user",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetype",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of all issue types visible to the user",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create an issue type from JSON representation",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetype",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Creates an issue type from a JSON representation and adds the issue newly created issue type to the default issue type scheme.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get paginated list of filtered issue types",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetype/page",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "query",
                  "value": "{{query}}",
                  "disabled": true
                },
                {
                  "key": "projectIds",
                  "value": "{{projectIds}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "key": "X-Requested-With",
                "value": "{{X-Requested-With}}",
                "disabled": true
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns paginated list of filtered issue types",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get full representation of issue type by id",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetype/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The issue type id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a full representation of the issue type that has the given id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update specified issue type from JSON representation",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetype/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The issue type id.",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Updates the specified issue type from a JSON representation.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete specified issue type and migrate associated issues",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetype/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The issue type id.",
                  "disabled": false
                },
                {
                  "key": "alternativeIssueTypeId",
                  "value": "{{alternativeIssueTypeId}}",
                  "description": "The id of an issue type to which issues associated with the removed issue type will be migrated.",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes the specified issue type. If the issue type has any associated issues, these issues will be migrated to the alternative issue type specified in the parameter.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get list of alternative issue types for given id",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetype/:id/alternatives",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The issue type id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of all alternative issue types for the given issue type id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Convert temporary avatar into a real avatar",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetype/:id/avatar",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The issue type id.",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Converts temporary avatar into a real avatar",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Create temporary avatar using multipart for issue type",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetype/:id/avatar/temporary",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The issue type id.",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "description": "Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because\nthe client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from\nwhich the client parses the JSON from.\nCreating a temporary avatar is part of a 3-step process in uploading a new\navatar for an issue type: upload, crop, confirm. This endpoint allows you to use a multipart upload\ninstead of sending the image directly as the request body.\nYou *must* use \"avatar\" as the name of the upload parameter:\ncurl -c cookiejar.txt -X POST -u admin:admin -H \"X-Atlassian-Token: no-check\" \\\n  -F \"avatar=@mynewavatar.png;type=image/png\" \\\n  'http://localhost:8090/jira/rest/api/2/issuetype/1/avatar/temporary'",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "contentType",
                  "disabled": true,
                  "type": "text",
                  "value": "{{contentType}}"
                },
                {
                  "key": "formField",
                  "disabled": true,
                  "type": "text",
                  "value": "{{formField}}"
                },
                {
                  "key": "inputStream",
                  "disabled": true,
                  "type": "text",
                  "value": "{{inputStream}}"
                },
                {
                  "key": "name",
                  "disabled": true,
                  "type": "text",
                  "value": "{{name}}"
                },
                {
                  "key": "size",
                  "disabled": true,
                  "type": "text",
                  "value": "{{size}}"
                },
                {
                  "key": "value",
                  "disabled": true,
                  "type": "text",
                  "value": "{{value}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Get all properties keys for issue type",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetype/:issueTypeId/properties",
              "query": [],
              "variable": [
                {
                  "key": "issueTypeId",
                  "value": "{{issueTypeId}}",
                  "description": "The issue type from which the keys will be returned.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the keys of all properties for the issue type identified by the id",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get value of specified issue type's property",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetype/:issueTypeId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "description": "The key of the property to return.",
                  "disabled": false
                },
                {
                  "key": "issueTypeId",
                  "value": "{{issueTypeId}}",
                  "description": "The issue type from which the property will be returned.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the value of the property with a given key from the issue type identified by the id",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update specified issue type's property",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetype/:issueTypeId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "description": "The key of the issue type's property. The maximum length of the key is 255 bytes",
                  "disabled": false
                },
                {
                  "key": "issueTypeId",
                  "value": "{{issueTypeId}}",
                  "description": "The issue type on which the property will be set.",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Sets the value of the specified issue type's property",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete specified issue type's property",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetype/:issueTypeId/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "description": "The key of the property to remove.",
                  "disabled": false
                },
                {
                  "key": "issueTypeId",
                  "value": "{{issueTypeId}}",
                  "description": "The issue type from which the property will be removed.",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes the property from the issue type identified by the id",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "issuetypescheme",
      "item": [
        {
          "name": "Get list of all issue type schemes visible to user",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetypescheme",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of all issue type schemes visible to the user. All issue types associated with the scheme will only be returned if an additional query parameter is provided: expand=schemes.issueTypes. Similarly, the default issue type associated with the scheme (if one exists) will only be returned if an additional query parameter is provided: expand=schemes.defaultIssueType. Note that both query parameters can be used together: expand=schemes.issueTypes,schemes.defaultIssueType.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create an issue type scheme from JSON representation",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetypescheme",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Creates an issue type scheme from a JSON representation",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get full representation of issue type scheme by id",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetypescheme/:schemeId",
              "query": [],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "description": "A String containing an issue type scheme's id.",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a full representation of the issue type scheme that has the given id",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update specified issue type scheme from JSON representation",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetypescheme/:schemeId",
              "query": [],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "description": "The id of the issue type scheme to update.",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Updates the specified issue type scheme from a JSON representation",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete specified issue type scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetypescheme/:schemeId",
              "query": [],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "description": "The id of the issue type scheme to remove.",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes the specified issue type scheme. Any projects associated with this IssueTypeScheme will be automatically associated with the global default IssueTypeScheme.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all of the associated projects for specified scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetypescheme/:schemeId/associations",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "description": "Id of the issue type scheme whose projects we're accessing",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "For the specified issue type scheme, returns all of the associated projects",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Set project associations for scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetypescheme/:schemeId/associations",
              "query": [],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "description": "The id of the issue type scheme whose project associations we're replacing.",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Associates the given projects with the specified issue type scheme",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Add project associations to scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetypescheme/:schemeId/associations",
              "query": [],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "description": "The id of the issue type scheme whose project associations we're adding to.",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Adds additional projects to those already associated with the specified issue type scheme",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Remove all project associations for specified scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetypescheme/:schemeId/associations",
              "query": [],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "description": "The id of the issue type scheme whose project associations we're removing",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes all project associations for the specified issue type scheme",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Remove given project association for specified scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/issuetypescheme/:schemeId/associations/:projIdOrKey",
              "query": [],
              "variable": [
                {
                  "key": "projIdOrKey",
                  "value": "{{projIdOrKey}}",
                  "description": "The id or key of the project that is to be un-associated with the issue type scheme",
                  "disabled": false
                },
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "description": "The id of the issue type scheme whose project association we're removing",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "For the specified issue type scheme, removes the given project association",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "jql",
      "item": [
        {
          "name": "Get auto complete data for JQL searches",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/jql/autocompletedata",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the auto complete data required for JQL searches",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get auto complete suggestions for JQL search",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/jql/autocompletedata/suggestions",
              "query": [
                {
                  "key": "predicateValue",
                  "value": "{{predicateValue}}",
                  "disabled": true
                },
                {
                  "key": "predicateName",
                  "value": "{{predicateName}}",
                  "disabled": true
                },
                {
                  "key": "fieldName",
                  "value": "{{fieldName}}",
                  "disabled": true
                },
                {
                  "key": "fieldValue",
                  "value": "{{fieldValue}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns auto complete suggestions for JQL search",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "licenseValidator",
      "item": [
        {
          "name": "Validate a Jira license",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/licenseValidator",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Validates a Jira license",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "monitoring",
      "item": [
        {
          "name": "Get App Monitoring status",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/monitoring/app",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Checks if App Monitoring is enabled",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update App Monitoring status",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/monitoring/app",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Enables or disables App Monitoring",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get if IPD Monitoring is enabled",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/monitoring/ipd",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Checks if IPD Monitoring is enabled",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update IPD Monitoring status",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/monitoring/ipd",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Enables or disables IPD Monitoring",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Check if JMX metrics are being exposed",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/monitoring/jmx/areMetricsExposed",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Checks if JMX metrics are being exposed",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get the available JMX metrics",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/monitoring/jmx/getAvailableMetrics",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Gets the available JMX metrics",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Start exposing JMX metrics",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/monitoring/jmx/startExposing",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [],
            "description": "Starts exposing JMX metrics",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Stop exposing JMX metrics",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/monitoring/jmx/stopExposing",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [],
            "description": "Stops exposing JMX metrics",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "mypermissions",
      "item": [
        {
          "name": "Get permissions for the logged in user",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/mypermissions",
              "query": [
                {
                  "key": "issueId",
                  "value": "{{issueId}}",
                  "disabled": true,
                  "description": "id of the issue to scope returned permissions for."
                },
                {
                  "key": "projectKey",
                  "value": "{{projectKey}}",
                  "disabled": true,
                  "description": "key of project to scope returned permissions for."
                },
                {
                  "key": "issueKey",
                  "value": "{{issueKey}}",
                  "disabled": true,
                  "description": "key of the issue to scope returned permissions for."
                },
                {
                  "key": "projectId",
                  "value": "{{projectId}}",
                  "disabled": true,
                  "description": "id of project to scope returned permissions for."
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all permissions in the system and whether the currently logged in user has them. You can optionally provide a specific context to get permissions for (projectKey OR projectId OR issueKey OR issueId)",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "mypreferences",
      "item": [
        {
          "name": "Get user preference by key",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/mypreferences",
              "query": [
                {
                  "key": "key",
                  "value": "{{key}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns preference of the currently logged in user. Preference key must be provided as input parameter (key). The value is returned exactly as it is. If key parameter is not provided or wrong - status code 404. If value is found  - status code 200.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update user preference",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/mypreferences",
              "query": [
                {
                  "key": "key",
                  "value": "{{key}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Sets preference of the currently logged in user. Preference key must be provided as input parameters (key). Value must be provided as post body. If key or value parameter is not provided - status code 404. If preference is set - status code 204.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete user preference",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/mypreferences",
              "query": [
                {
                  "key": "key",
                  "value": "{{key}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes preference of the currently logged in user. Preference key must be provided as input parameters (key). If key parameter is not provided or wrong - status code 404. If preference is unset - status code 204.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "myself",
      "item": [
        {
          "name": "Get currently logged user",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/myself",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns currently logged user. This resource cannot be accessed anonymously",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update currently logged user",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/myself",
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Modify currently logged user. The 'value' fields present will override the existing value. Fields skipped in request will not be changed. Only email and display name can be change that way. Requires user password.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Update caller password",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/myself/password",
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Modify caller password.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "notificationscheme",
      "item": [
        {
          "name": "Get paginated notification schemes",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/notificationscheme",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a paginated list of notification schemes. In order to access notification scheme, the calling user is\nrequired to have permissions to administer at least one project associated with the requested notification scheme. Each scheme contains\na list of events and recipient configured to receive notifications for these events. Consumer should allow events without recipients to appear in response.\nThe list is ordered by the scheme's name.\nFollow the documentation of /notificationscheme/{id} resource for all details about returned value.\n",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get full notification scheme details",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/notificationscheme/:id",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a full representation of the notification scheme for the given id. This resource will return a\nnotification scheme containing a list of events and recipient configured to receive notifications for these events. Consumer\nshould allow events without recipients to appear in response. User accessing\nthe data is required to have permissions to administer at least one project associated with the requested notification scheme.\nNotification recipients can be:\n- current assignee - the value of the notificationType is CurrentAssignee\n- issue reporter - the value of the notificationType is Reporter\n- current user - the value of the notificationType is CurrentUser\n- project lead - the value of the notificationType is ProjectLead\n- component lead - the value of the notificationType is ComponentLead\n- all watchers - the value of the notification type is AllWatchers\nconfigured user - the value of the notification type is User. Parameter will contain key of the user. Information about the user will be provided\nif user expand parameter is used.\n- configured group - the value of the notification type is Group. Parameter will contain name of the group. Information about the group will be provided\nif group expand parameter is used.\n- configured email address - the value of the notification type is EmailAddress, additionally information about the email will be provided.\n- users or users in groups in the configured custom fields - the value of the notification type is UserCustomField or GroupCustomField. Parameter\nwill contain id of the custom field. Information about the field will be provided if field expand parameter is used.\n- configured project role - the value of the notification type is ProjectRole. Parameter will contain project role id. Information about the project role\nwill be provided if projectRole expand parameter is used.\nPlease see the example for reference.\nThe events can be Jira system events or events configured by administrator. In case of the system events, data about theirs\nids, names and descriptions is provided. In case of custom events, the template event is included as well.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "password",
      "item": [
        {
          "name": "Get current password policy requirements",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/password/policy",
              "query": [
                {
                  "key": "hasOldPassword",
                  "value": "{{hasOldPassword}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the list of requirements for the current password policy. For example, \"The password must have at least 10 characters.\", \"The password must not be similar to the user's name or email address.\", etc.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get reasons for password policy disallowance on user creation",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/password/policy/createUser",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of statements explaining why the password policy would disallow a proposed password for a new user.\nYou can use this method to test the password policy validation. This could be done prior to an action\nwhere a new user and related password are created, using methods like the ones in\nUserService.\nFor example, you could use this to validate a password in a create user form in the user interface, as the user enters it.\nThe username and new password must be not empty to perform the validation.\nNote, this method will help you validate against the policy only. It won't check any other validations that might be performed\nwhen creating a new user, e.g. checking whether a user with the same name already exists.\n",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get reasons for password policy disallowance on user password update",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/password/policy/updateUser",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of statements explaining why the password policy would disallow a proposed new password for a user with an existing password.\nYou can use this method to test the password policy validation. This could be done prior to an action where the password\nis actually updated, using methods like ChangePassword or ResetPassword.\nFor example, you could use this to validate a password in a change password form in the user interface, as the user enters it.\nThe user must exist and the username and new password must be not empty, to perform the validation.\nNote, this method will help you validate against the policy only. It won't check any other validations that might be performed\nwhen submitting a password change/reset request, e.g. verifying whether the old password is valid.\n",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "permissions",
      "item": [
        {
          "name": "Get all permissions present in Jira instance",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/permissions",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all permissions that are present in the Jira instance - Global, Project and the global ones added by plugins",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "permissionscheme",
      "item": [
        {
          "name": "Get all permission schemes",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/permissionscheme",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of all permission schemes. By default only shortened beans are returned. If you want to include permissions of all the schemes, then specify the permissions expand parameter. Permissions will be included also if you specify any other expand parameter.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create a new permission scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/permissionscheme",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Create a new permission scheme. This method can create schemes with a defined permission set, or without.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get scheme attribute by key",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/permissionscheme/:permissionSchemeId/attribute/:attributeKey",
              "query": [],
              "variable": [
                {
                  "key": "permissionSchemeId",
                  "value": "{{permissionSchemeId}}",
                  "disabled": false
                },
                {
                  "key": "attributeKey",
                  "value": "{{attributeKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the attribute for a permission scheme specified by permission scheme id and attribute key.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update or insert a scheme attribute",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/permissionscheme/:permissionSchemeId/attribute/:key",
              "query": [],
              "variable": [
                {
                  "key": "permissionSchemeId",
                  "value": "{{permissionSchemeId}}",
                  "disabled": false
                },
                {
                  "key": "key",
                  "value": "{{key}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "text/plain"
              }
            ],
            "description": "Updates or inserts the attribute for a permission scheme specified by permission scheme id. The attribute consists of the key and the value. The value will be converted to Boolean using Boolean#valueOf.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw"
            }
          },
          "response": []
        },
        {
          "name": "Get a permission scheme by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/permissionscheme/:schemeId",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a permission scheme identified by the given id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update a permission scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/permissionscheme/:schemeId",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Updates a permission scheme. If the permissions list is present then it will be set in the permission scheme, which basically means it will overwrite any permission grants that existed in the permission scheme. Sending an empty list will remove all permission grants from the permission scheme. To update just the name and description, do not send permissions list at all. To add or remove a single permission grant instead of updating the whole list at once use the {schemeId}/permission/ resource.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a permission scheme by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/permissionscheme/:schemeId",
              "query": [],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes a permission scheme identified by the given id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all permission grants of a scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/permissionscheme/:schemeId/permission",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all permission grants of the given permission scheme.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create a permission grant in a scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/permissionscheme/:schemeId/permission",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Creates a permission grant in a permission scheme.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get a permission grant by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/permissionscheme/:schemeId/permission/:permissionId",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "permissionId",
                  "value": "{{permissionId}}",
                  "disabled": false
                },
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a permission grant identified by the given id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Delete a permission grant from a scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/permissionscheme/:schemeId/permission/:permissionId",
              "query": [],
              "variable": [
                {
                  "key": "permissionId",
                  "value": "{{permissionId}}",
                  "disabled": false
                },
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes a permission grant from a permission scheme.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "priority",
      "item": [
        {
          "name": "Get all issue priorities",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/priority",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of all issue priorities",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get paginated issue priorities",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/priority/page",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "query",
                  "value": "{{query}}",
                  "disabled": true
                },
                {
                  "key": "projectIds",
                  "value": "{{projectIds}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a page with list of issue priorities whose names (or their translations) match query",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get an issue priority by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/priority/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns an issue priority",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "priorityschemes",
      "item": [
        {
          "name": "Get all priority schemes",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/priorityschemes",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all priority schemes. All project keys associated with the priority scheme will only be returned if additional query parameter is provided expand=schemes.projectKeys",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create new priority scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/priorityschemes",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Creates new priority scheme.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get a priority scheme by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/priorityschemes/:schemeId",
              "query": [],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Gets a full representation of a priority scheme in JSON format.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update a priority scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/priorityschemes/:schemeId",
              "query": [],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Updates a priority scheme. Update will be rejected if issue migration would be needed as a result of scheme update. Priority scheme update with migration is possible from the UI.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a priority scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/priorityschemes/:schemeId",
              "query": [],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes a priority scheme. All projects using deleted scheme will use default priority scheme afterwards.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "project",
      "item": [
        {
          "name": "Get all visible projects",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project",
              "query": [
                {
                  "key": "includeArchived",
                  "value": "{{includeArchived}}",
                  "disabled": true
                },
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "recent",
                  "value": "{{recent}}",
                  "disabled": true
                },
                {
                  "key": "browseArchive",
                  "value": "{{browseArchive}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all projects which are visible for the currently logged in user. If no user is logged in, it returns the list of projects that are visible when using anonymous access.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create a new project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Creates a new project",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get all project types",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/type",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all the project types defined on the Jira instance, not taking into account whether the license to use those project types is valid or not. In case of anonymous checks if they can access at least one project.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get project type by key",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/type/:projectTypeKey",
              "query": [],
              "variable": [
                {
                  "key": "projectTypeKey",
                  "value": "{{projectTypeKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the project type with the given key. In case of anonymous checks if they can access at least one project.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get project type by key",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/type/:projectTypeKey/accessible",
              "query": [],
              "variable": [
                {
                  "key": "projectTypeKey",
                  "value": "{{projectTypeKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the project type with the given key, if it is accessible to the logged in user. This takes into account whether the user is licensed on the Application that defines the project type.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get a project by ID or key",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a full representation of a project in JSON format. All project keys associated with the project will only be returned if expand=projectKeys.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update a project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Updates a project. Only non null values sent in JSON will be updated in the project. Values available for the assigneeType field are: \"PROJECT_LEAD\" and \"UNASSIGNED\".",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes a project",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Archive a project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/archive",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "description": "Archives a project",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update project avatar",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/avatar",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Updates an avatar for a project. This is step 3/3 of changing an avatar for a project.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Create avatar from temporary",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/avatar",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Converts the temporary avatar into the final one. This is step 2/3 of changing an avatar for a project:\n- Upload (store temporary avatar)\n- Crop (create avatar from temporary)\n- Update (update project avatar)",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Store temporary avatar using multipart",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/avatar/temporary",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "description": "Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because\nthe client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from\nwhich the client parses the JSON.\n",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "contentType",
                  "disabled": true,
                  "type": "text",
                  "value": "{{contentType}}"
                },
                {
                  "key": "formField",
                  "disabled": true,
                  "type": "text",
                  "value": "{{formField}}"
                },
                {
                  "key": "inputStream",
                  "disabled": true,
                  "type": "text",
                  "value": "{{inputStream}}"
                },
                {
                  "key": "name",
                  "disabled": true,
                  "type": "text",
                  "value": "{{name}}"
                },
                {
                  "key": "size",
                  "disabled": true,
                  "type": "text",
                  "value": "{{size}}"
                },
                {
                  "key": "value",
                  "disabled": true,
                  "type": "text",
                  "value": "{{value}}"
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Delete an avatar",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/avatar/:id",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes avatar",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all avatars for a project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/avatars",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all avatars which are visible for the currently logged in user. The avatars are grouped into system and custom.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get project components",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/components",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Contains a full representation of the specified project's components.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get keys of all properties for project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/properties",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the keys of all properties for the project identified by the key or by the id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get value of property from project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "disabled": false
                },
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the value of the property with a given key from the project identified by the key or by the id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Set value of specified project's property",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "disabled": false
                },
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Sets the value of the specified project's property. You can use this resource to store a custom data against the project identified by the key or by the id. The user who stores the data is required to have permissions to administer the project.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete property from project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/properties/:propertyKey",
              "query": [],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "disabled": false
                },
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes the property from the project identified by the key or by the id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Restore an archived project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/restore",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "description": "Restores an archived project. In case of success restored project should be re-indexed.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all roles in project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/role",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [],
            "description": "Returns all roles in the given project Id or key, with links to full details on each role.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get details for a project role",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/role/:id",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the details for a given project role in a project.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update project role with actors",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/role/:id",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Updates a project role to include the specified actors (users or groups). Can be also used to clear roles to not include any users or groups. For user actors, their usernames should be used.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Add actor to project role",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/role/:id",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Adds an actor (user or group) to a project role. For user actors, their usernames should be used.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete actors from project role",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/role/:id",
              "query": [
                {
                  "key": "user",
                  "value": "{{user}}",
                  "disabled": true
                },
                {
                  "key": "group",
                  "value": "{{group}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes actors (users or groups) from a project role.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all issue types with statuses for a project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/statuses",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Get all issue types with valid status values for a project",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update project type",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/type/:newProjectTypeKey",
              "query": [],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                },
                {
                  "key": "newProjectTypeKey",
                  "value": "{{newProjectTypeKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Updates the type of a project",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get paginated project versions",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/version",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "orderBy",
                  "value": "{{orderBy}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all versions for the specified project. Results are paginated. Results can be ordered by the following fields: sequence, name, startDate, releaseDate.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get project versions",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectIdOrKey/versions",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "projectIdOrKey",
                  "value": "{{projectIdOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Contains a full representation of a the specified project's versions.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get issue security scheme for project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectKeyOrId/issuesecuritylevelscheme",
              "query": [],
              "variable": [
                {
                  "key": "projectKeyOrId",
                  "value": "{{projectKeyOrId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the issue security scheme for project.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get notification scheme associated with the project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectKeyOrId/notificationscheme",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "projectKeyOrId",
                  "value": "{{projectKeyOrId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Gets a notification scheme associated with the project. Follow the documentation of /notificationscheme/{id} resource for all details about returned value.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get assigned permission scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectKeyOrId/permissionscheme",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "projectKeyOrId",
                  "value": "{{projectKeyOrId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Gets a permission scheme assigned with a project",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Assign permission scheme to project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectKeyOrId/permissionscheme",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "projectKeyOrId",
                  "value": "{{projectKeyOrId}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Assigns a permission scheme with a project",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get assigned priority scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectKeyOrId/priorityscheme",
              "query": [],
              "variable": [
                {
                  "key": "projectKeyOrId",
                  "value": "{{projectKeyOrId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Gets a full representation of a priority scheme in JSON format used by specified project. User must be global administrator or project administrator. All project keys associated with the priority scheme will only be returned if additional query parameter is provided expand=projectKeys.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Assign project with priority scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectKeyOrId/priorityscheme",
              "query": [],
              "variable": [
                {
                  "key": "projectKeyOrId",
                  "value": "{{projectKeyOrId}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Assigns project with priority scheme. Priority scheme assign with migration is possible from the UI. Operation will fail if migration is needed as a result of operation eg. there are issues with priorities invalid in the destination scheme. All project keys associated with the priority scheme will only be returned if additional query parameter is provided expand=projectKeys.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Unassign project from priority scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectKeyOrId/priorityscheme/:schemeId",
              "query": [],
              "variable": [
                {
                  "key": "schemeId",
                  "value": "{{schemeId}}",
                  "disabled": false
                },
                {
                  "key": "projectKeyOrId",
                  "value": "{{projectKeyOrId}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Unassigns project from priority scheme. Operation will fail for defualt priority scheme, project is not found or project is not associated with provided priority scheme. All project keys associated with the priority scheme will only be returned if additional query parameter is provided expand=projectKeys.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all security levels for project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectKeyOrId/securitylevel",
              "query": [],
              "variable": [
                {
                  "key": "projectKeyOrId",
                  "value": "{{projectKeyOrId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all security levels for the project that the current logged in user has access to. If the user does not have the Set Issue Security permission, the list will be empty.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get workflow scheme for project",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/project/:projectKeyOrId/workflowscheme",
              "query": [],
              "variable": [
                {
                  "key": "projectKeyOrId",
                  "value": "{{projectKeyOrId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the workflow scheme that is associated with requested project.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "projectCategory",
      "item": [
        {
          "name": "Get all project categories",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/projectCategory",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all project categories",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create project category",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/projectCategory",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Create a project category.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get project category by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/projectCategory/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a full representation of the project category that has the given id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update project category",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/projectCategory/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Modify a project category.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete project category",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/projectCategory/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Delete a project category.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "projects",
      "item": [
        {
          "name": "Get projects matching query",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/projects/picker",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "query",
                  "value": "{{query}}",
                  "disabled": true
                },
                {
                  "key": "allowEmptyQuery",
                  "value": "{{allowEmptyQuery}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of projects visible to the user where project name and/or key is matching the given query.\nPassing an empty (or whitespace only) query will match no projects. The project matches will\ncontain a field with the query highlighted.\nThe number of projects returned can be controlled by passing a value for 'maxResults', but a hard limit of no\nmore than 100 projects is enforced. The projects are wrapped in a single response object that contains\na header for use in the picker, specifically 'Showing X of Y matching projects' and the total number\nof matches for the query.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "projectvalidate",
      "item": [
        {
          "name": "Get project key validation",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/projectvalidate/key",
              "query": [
                {
                  "key": "key",
                  "value": "{{key}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Validates a project key.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "reindex",
      "item": [
        {
          "name": "Get reindex information",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/reindex",
              "query": [
                {
                  "key": "taskId",
                  "value": "{{taskId}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns information on the system reindexes. If a reindex is currently taking place then information about this reindex is returned. If there is no active index task, then returns information about the latest reindex task run, otherwise returns a 404 indicating that no reindex has taken place.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Start a reindex operation",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/reindex",
              "query": [
                {
                  "key": "indexChangeHistory",
                  "value": "{{indexChangeHistory}}",
                  "disabled": true
                },
                {
                  "key": "type",
                  "value": "{{type}}",
                  "disabled": true
                },
                {
                  "key": "indexWorklogs",
                  "value": "{{indexWorklogs}}",
                  "disabled": true
                },
                {
                  "key": "indexComments",
                  "value": "{{indexComments}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "POST",
            "header": [],
            "description": "Kicks off a reindex. Need Admin permissions to perform this reindex.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Reindex individual issues",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/reindex/issue",
              "query": [
                {
                  "key": "issueId",
                  "value": "{{issueId}}",
                  "disabled": true
                },
                {
                  "key": "indexChangeHistory",
                  "value": "{{indexChangeHistory}}",
                  "disabled": true
                },
                {
                  "key": "indexWorklogs",
                  "value": "{{indexWorklogs}}",
                  "disabled": true
                },
                {
                  "key": "indexComments",
                  "value": "{{indexComments}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Reindexes one or more individual issues. Indexing is performed synchronously - the call returns when indexing of the issues has completed or a failure occurs.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get reindex progress",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/reindex/progress",
              "query": [
                {
                  "key": "taskId",
                  "value": "{{taskId}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns information on the system reindexes. If a reindex is currently taking place then information about this reindex is returned. If there is no active index task, then returns information about the latest reindex task run, otherwise returns a 404 indicating that no reindex has taken place.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Execute pending reindex requests",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/reindex/request",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Executes any pending reindex requests. Execution is asynchronous - progress of the returned tasks can be monitored through other REST calls.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get progress of multiple reindex requests",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/reindex/request/bulk",
              "query": [
                {
                  "key": "requestId",
                  "value": "{{requestId}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Retrieves the progress of multiple reindex requests. Only reindex requests that actually exist will be returned in the results.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get progress of a single reindex request",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/reindex/request/:requestId",
              "query": [],
              "variable": [
                {
                  "key": "requestId",
                  "value": "{{requestId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Retrieves the progress of a single reindex request.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "resolution",
      "item": [
        {
          "name": "Get all resolutions",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/resolution",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of all resolutions.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get paginated filtered resolutions",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/resolution/page",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "query",
                  "value": "{{query}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns paginated list of filtered resolutions.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get a resolution by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/resolution/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a resolution.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "role",
      "item": [
        {
          "name": "Get all project roles",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/role",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Get all the ProjectRoles available in Jira. Currently this list is global.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create a new project role",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/role",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Creates a new ProjectRole to be available in Jira. The created role does not have any default actors assigned.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get a specific project role",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/role/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Get a specific ProjectRole available in Jira.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Fully updates a role's name and description",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/role/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Fully updates a roles. Both name and description must be given.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Partially updates a role's name or description",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/role/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Partially updates a roles name or description.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Deletes a role",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/role/:id",
              "query": [
                {
                  "key": "swap",
                  "value": "{{swap}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes a role. May return 403 in the future",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get default actors for a role",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/role/:id/actors",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Gets default actors for the given role.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Adds default actors to a role",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/role/:id/actors",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Adds default actors to the given role. The request data should contain a list of usernames or a list of groups to add.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Removes default actor from a role",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/role/:id/actors",
              "query": [
                {
                  "key": "user",
                  "value": "{{user}}",
                  "disabled": true
                },
                {
                  "key": "group",
                  "value": "{{group}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Removes default actor from the given role.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "screens",
      "item": [
        {
          "name": "Get available field screens",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/screens",
              "query": [
                {
                  "key": "search",
                  "value": "{{search}}",
                  "disabled": true
                },
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [],
            "description": "Adds field or custom field to the default tab.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Add field to default screen",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/screens/addToDefault/:fieldId",
              "query": [],
              "variable": [
                {
                  "key": "fieldId",
                  "value": "{{fieldId}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [],
            "description": "Moves field on the given tab.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get available fields for screen",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/screens/:screenId/availableFields",
              "query": [],
              "variable": [
                {
                  "key": "screenId",
                  "value": "{{screenId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Gets available fields for screen. i.e ones that haven't already been added.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all tabs for a screen",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/screens/:screenId/tabs",
              "query": [
                {
                  "key": "projectKey",
                  "value": "{{projectKey}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "screenId",
                  "value": "{{screenId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of all tabs for the given screen.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create tab for a screen",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/screens/:screenId/tabs",
              "query": [],
              "variable": [
                {
                  "key": "screenId",
                  "value": "{{screenId}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Creates tab for given screen.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Rename a tab on a screen",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/screens/:screenId/tabs/:tabId",
              "query": [],
              "variable": [
                {
                  "key": "tabId",
                  "value": "{{tabId}}",
                  "disabled": false
                },
                {
                  "key": "screenId",
                  "value": "{{screenId}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Renames tab on given screen.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a tab from a screen",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/screens/:screenId/tabs/:tabId",
              "query": [],
              "variable": [
                {
                  "key": "tabId",
                  "value": "{{tabId}}",
                  "disabled": false
                },
                {
                  "key": "screenId",
                  "value": "{{screenId}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes tab from given screen.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all fields for a tab",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/screens/:screenId/tabs/:tabId/fields",
              "query": [
                {
                  "key": "projectKey",
                  "value": "{{projectKey}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "tabId",
                  "value": "{{tabId}}",
                  "disabled": false
                },
                {
                  "key": "screenId",
                  "value": "{{screenId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Gets all fields for a given tab.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Add field to a tab",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/screens/:screenId/tabs/:tabId/fields",
              "query": [],
              "variable": [
                {
                  "key": "tabId",
                  "value": "{{tabId}}",
                  "disabled": false
                },
                {
                  "key": "screenId",
                  "value": "{{screenId}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Adds field to the given tab.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Remove field from tab",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/screens/:screenId/tabs/:tabId/fields/:id",
              "query": [],
              "variable": [
                {
                  "key": "tabId",
                  "value": "{{tabId}}",
                  "disabled": false
                },
                {
                  "key": "screenId",
                  "value": "{{screenId}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes field from given tab.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Move field on a tab",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/screens/:screenId/tabs/:tabId/fields/:id/move",
              "query": [],
              "variable": [
                {
                  "key": "tabId",
                  "value": "{{tabId}}",
                  "disabled": false
                },
                {
                  "key": "screenId",
                  "value": "{{screenId}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Moves field on the given tab.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Update 'showWhenEmptyIndicator' for a field",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/screens/:screenId/tabs/:tabId/fields/:id/updateShowWhenEmptyIndicator/:newValue",
              "query": [],
              "variable": [
                {
                  "key": "tabId",
                  "value": "{{tabId}}",
                  "disabled": false
                },
                {
                  "key": "screenId",
                  "value": "{{screenId}}",
                  "disabled": false
                },
                {
                  "key": "newValue",
                  "value": "{{newValue}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "description": "Update 'showWhenEmptyIndicator' for given field on screen.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Move tab position",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/screens/:screenId/tabs/:tabId/move/:pos",
              "query": [],
              "variable": [
                {
                  "key": "tabId",
                  "value": "{{tabId}}",
                  "disabled": false
                },
                {
                  "key": "screenId",
                  "value": "{{screenId}}",
                  "disabled": false
                },
                {
                  "key": "pos",
                  "value": "{{pos}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [],
            "description": "Moves tab position.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "search",
      "item": [
        {
          "name": "Get issues using JQL",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/search",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "jql",
                  "value": "{{jql}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "validateQuery",
                  "value": "{{validateQuery}}",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "{{fields}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Searches for issues using JQL.\nSorting\nthe jql parameter is a full JQL\nexpression, and includes an ORDER BY clause.\nThe fields param (which can be specified multiple times) gives a comma-separated list of fields\nto include in the response. This can be used to retrieve a subset of fields.\nA particular field can be excluded by prefixing it with a minus.\nBy default, only navigable (*navigable) fields are returned in this search resource. Note: the default is different\nin the get-issue resource -- the default there all fields (*all).\n*all - include all fields\n*navigable - include just navigable fields\nsummary,comment - include just the summary and comments\n-description - include navigable fields except the description (the default is *navigable for search)\n*all,-comment - include everything except comments\nGET vs POST:\nIf the JQL query is too large to be encoded as a query param you should instead\nPOST to this resource.\nExpanding Issues in the Search Result:\nIt is possible to expand the issues returned by directly specifying the expansion on the expand parameter passed\nin to this resources.\nFor instance, to expand the changelog for all the issues on the search result, it is necessary to\nspecify changelog as one of the values to expand.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Perform search with JQL",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/search",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Performs a search using JQL.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "securitylevel",
      "item": [
        {
          "name": "Get a security level by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/securitylevel/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a full representation of the security level that has the given id.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "serverInfo",
      "item": [
        {
          "name": "Get general information about the current Jira server",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/serverInfo",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns general information about the current Jira server.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "settings",
      "item": [
        {
          "name": "Update base URL for Jira instance",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/settings/baseUrl",
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Sets the base URL that is configured for this Jira instance.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get default system columns for issue navigator",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/settings/columns",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the default system columns for issue navigator. Admin permission will be required.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Set default system columns for issue navigator using form",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/settings/columns",
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "description": "Sets the default system columns for issue navigator. Admin permission will be required.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "columns",
                  "value": "{{columns}}",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "status",
      "item": [
        {
          "name": "Get all statuses",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/status",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of all statuses",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get paginated filtered statuses",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/status/page",
              "query": [
                {
                  "key": "issueTypeIds",
                  "value": "{{issueTypeIds}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "query",
                  "value": "{{query}}",
                  "disabled": true
                },
                {
                  "key": "projectIds",
                  "value": "{{projectIds}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns paginated list of filtered statuses",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get status by ID or name",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/status/:idOrName",
              "query": [],
              "variable": [
                {
                  "key": "idOrName",
                  "value": "{{idOrName}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a full representation of the Status having the given id or name.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "statuscategory",
      "item": [
        {
          "name": "Get all status categories",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/statuscategory",
              "query": [
                {
                  "key": "request",
                  "value": "{{request}}",
                  "disabled": true,
                  "description": "a Request"
                },
                {
                  "key": "uriInfo",
                  "value": "{{uriInfo}}",
                  "disabled": true,
                  "description": "a UriInfo"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of all status categories",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get status category by ID or key",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/statuscategory/:idOrKey",
              "query": [],
              "variable": [
                {
                  "key": "idOrKey",
                  "value": "{{idOrKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a full representation of the StatusCategory having the given id or key",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "terminology",
      "item": [
        {
          "name": "Get all defined names for 'epic' and 'sprint'",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/terminology/entries",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of all defined names for the default words 'epic' and 'sprint'",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update epic/sprint names from original to new",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/terminology/entries",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Change epic/sprint names from {originalName} to {newName}. The {newName} will be displayed in Jira instead of {originalName}\n{\"originalName\"} must be equal to \"epic\" or \"sprint\".\nThere can be only one entry per unique {\"originalName\"}.\n{\"newName\"} can only consist of alphanumeric characters and spaces e.g. {\"newName\": \"iteration number 2\"}.\n{\"newName\"} must be between 1 to 100 characters.\nIt can't use the already defined {\"newName\"} values or restricted JQL words.\nTo reset {\"newName\"} to the default value, enter the {\"originalName\"} value as the value for {\"newName\"}. For example, if you want to return to {\"originalName\": \"sprint\"}, enter {\"newName\": \"sprint\"}.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get epic or sprint name by original name",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/terminology/entries/:originalName",
              "query": [],
              "variable": [
                {
                  "key": "originalName",
                  "value": "{{originalName}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns epic or sprint name as specified in the {originalName} path param",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "universal_avatar",
      "item": [
        {
          "name": "Get all avatars for a type and owner",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/universal_avatar/type/:type/owner/:owningObjectId",
              "query": [],
              "variable": [
                {
                  "key": "type",
                  "value": "{{type}}",
                  "disabled": false
                },
                {
                  "key": "owningObjectId",
                  "value": "{{owningObjectId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of all avatars",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create avatar from temporary",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/universal_avatar/type/:type/owner/:owningObjectId/avatar",
              "query": [],
              "variable": [
                {
                  "key": "type",
                  "value": "{{type}}",
                  "disabled": false
                },
                {
                  "key": "owningObjectId",
                  "value": "{{owningObjectId}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Creates avatar from temporary",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete avatar by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/universal_avatar/type/:type/owner/:owningObjectId/avatar/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                },
                {
                  "key": "type",
                  "value": "{{type}}",
                  "disabled": false
                },
                {
                  "key": "owningObjectId",
                  "value": "{{owningObjectId}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes avatar",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create temporary avatar using multipart upload",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/universal_avatar/type/:type/owner/:owningObjectId/temp",
              "query": [],
              "variable": [
                {
                  "key": "type",
                  "value": "{{type}}",
                  "disabled": false
                },
                {
                  "key": "owningObjectId",
                  "value": "{{owningObjectId}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "multipart/form-data"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Creates temporary avatar",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "contentType",
                  "disabled": true,
                  "type": "text",
                  "value": "{{contentType}}"
                },
                {
                  "key": "formField",
                  "disabled": true,
                  "type": "text",
                  "value": "{{formField}}"
                },
                {
                  "key": "inputStream",
                  "disabled": true,
                  "type": "text",
                  "value": "{{inputStream}}"
                },
                {
                  "key": "name",
                  "disabled": true,
                  "type": "text",
                  "value": "{{name}}"
                },
                {
                  "key": "size",
                  "disabled": true,
                  "type": "text",
                  "value": "{{size}}"
                },
                {
                  "key": "value",
                  "disabled": true,
                  "type": "text",
                  "value": "{{value}}"
                }
              ]
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "upgrade",
      "item": [
        {
          "name": "Get result of the last upgrade task",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/upgrade",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the result of the last upgrade task.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Run pending upgrade tasks",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/upgrade",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [],
            "description": "Runs any pending delayed upgrade tasks. Need Admin permissions to do this.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "user",
      "item": [
        {
          "name": "Get user by username or key",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user",
              "query": [
                {
                  "key": "includeDeleted",
                  "value": "{{includeDeleted}}",
                  "disabled": true
                },
                {
                  "key": "key",
                  "value": "{{key}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a user.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update user details",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user",
              "query": [
                {
                  "key": "key",
                  "value": "{{key}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Modify user. The 'value' fields present will override the existing value. Fields skipped in request will not be changed.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Create new user",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Create user. By default created user will not be notified with email. If password field is not set then password will be randomly generated.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete user",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user",
              "query": [
                {
                  "key": "key",
                  "value": "{{key}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes user and its references (like project roles associations, watches, history). Note: user references will not be removed if multiple User Directories are used and there is a user with the same name existing in another directory (shadowing user).",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get available accessibility personal settings",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/a11y/personal-settings",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns available accessibility personal settings along with `enabled` property that indicates the currently logged-in user preference."
          },
          "response": []
        },
        {
          "name": "Get validation for user anonymization",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/anonymization",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "userKey",
                  "value": "{{userKey}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [],
            "description": "Validates user anonymization process."
          },
          "response": []
        },
        {
          "name": "Schedule user anonymization",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/anonymization",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Schedules a user anonymization process. Requires system admin permission.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get user anonymization progress",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/anonymization/progress",
              "query": [
                {
                  "key": "taskId",
                  "value": "{{taskId}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [],
            "description": "Returns information about a user anonymization operation progress."
          },
          "response": []
        },
        {
          "name": "Get validation for user anonymization rerun",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/anonymization/rerun",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                },
                {
                  "key": "oldUserKey",
                  "value": "{{oldUserKey}}",
                  "disabled": true
                },
                {
                  "key": "oldUserName",
                  "value": "{{oldUserName}}",
                  "disabled": true
                },
                {
                  "key": "userKey",
                  "value": "{{userKey}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Validates user anonymization re-run process."
          },
          "response": []
        },
        {
          "name": "Schedule user anonymization rerun",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/anonymization/rerun",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Schedules a user anonymization process. Requires system admin permission.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete stale user anonymization task",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/anonymization/unlock",
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes stale user anonymization task, for scenarios when the node that was executing it is no longer alive. Use it only after making sure that the parent node of the task is actually down, and not just having connectivity issues."
          },
          "response": []
        },
        {
          "name": "Add user to application",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/application",
              "query": [
                {
                  "key": "applicationKey",
                  "value": "{{applicationKey}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "POST",
            "header": [],
            "description": "Add user to given application. Admin permission will be required to perform this operation.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Remove user from application",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/application",
              "query": [
                {
                  "key": "applicationKey",
                  "value": "{{applicationKey}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "header": [],
            "description": "Remove user from given application. Admin permission will be required to perform this operation.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Find bulk assignable users",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/assignable/multiProjectSearch",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "projectKeys",
                  "value": "{{projectKeys}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of users that match the search string and can be assigned issues for all the given projects.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Find assignable users by username",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/assignable/search",
              "query": [
                {
                  "key": "issueKey",
                  "value": "{{issueKey}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "project",
                  "value": "{{project}}",
                  "disabled": true
                },
                {
                  "key": "actionDescriptorId",
                  "value": "{{actionDescriptorId}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of users that match the search string. This resource cannot be accessed anonymously. Please note that this resource should be called with an issue key when a list of assignable users is retrieved. For create only a project key should be supplied. The list of assignable users may be incorrect if it's called with the project key for editing.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update user avatar",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/avatar",
              "query": [
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Updates the avatar for the user.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Create avatar from temporary",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/avatar",
              "query": [
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Converts temporary avatar into a real avatar",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Store temporary avatar using multipart",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/avatar/temporary",
              "query": [
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "description": "Creates temporary avatar using multipart. The response is sent back as JSON stored in a textarea. This is because the client uses remote iframing to submit avatars using multipart. So we must send them a valid HTML page back from which the client parses the JSON from.\nCreating a temporary avatar is part of a 3-step process in uploading a new avatar for a user: upload, crop, confirm. This endpoint allows you to use a multipart upload instead of sending the image directly as the request body.\nYou *must* use \"avatar\" as the name of the upload parameter:\ncurl -c cookiejar.txt -X POST -u admin:admin -H \"X-Atlassian-Token: no-check\" \\\n  -F \"avatar=@mynewavatar.png;type=image/png\" \\\n  'http://localhost:8090/jira/rest/api/2/user/avatar/temporary?username=admin'",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw"
            }
          },
          "response": []
        },
        {
          "name": "Delete avatar",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/avatar/:id",
              "query": [
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Deletes avatar",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get all avatars for user",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/avatars",
              "query": [
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns all avatars which are visible for the currently logged in user.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get default columns for user",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/columns",
              "query": [
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the default columns for the given user. Admin permission will be required to get columns for a user other than the currently logged in user.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Set default columns for user",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/columns",
              "query": [],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "description": "Sets the default columns for the given user. Admin permission will be required to get columns for a user other than the currently logged in user.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                },
                {
                  "key": "columns",
                  "value": "{{columns}}",
                  "disabled": true
                }
              ]
            }
          },
          "response": []
        },
        {
          "name": "Reset default columns to system default",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/columns",
              "query": [
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "DELETE",
            "header": [],
            "description": "Reset the default columns for the given user to the system default. Admin permission will be required to get columns for a user other than the currently logged in user.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get duplicated users count",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/duplicated/count",
              "query": [
                {
                  "key": "flush",
                  "value": "{{flush}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of users that match the search string. This resource cannot be accessed anonymously.\nDuplicated means that the user has an account in more than one directory\nand either more than one account is active or the only active account does not belong to the directory\nwith the highest priority.\nThe data returned by this endpoint is cached for 10 minutes and the cache is flushed when any User Directory\nis added, removed, enabled, disabled, or synchronized.\nA System Administrator can also flush the cache manually.\nRelated JAC ticket: https://jira.atlassian.com/browse/JRASERVER-68797",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get duplicated users mapping",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/duplicated/list",
              "query": [
                {
                  "key": "flush",
                  "value": "{{flush}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns duplicated users mapped to their directories with an indication if their accounts are active or not.\nDuplicated means that the user has an account in more than one directory and either more than one account is active\nor the only active account does not belong to the directory with the highest priority.\nThe data returned by this endpoint is cached for 10 minutes and the cache is flushed when any User Directory\nis added, removed, enabled, disabled, or synchronized.\nA System Administrator can also flush the cache manually.\nRelated JAC ticket: https://jira.atlassian.com/browse/JRASERVER-68797",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update user password",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/password",
              "query": [
                {
                  "key": "key",
                  "value": "{{key}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Modify user password.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Find users with all specified permissions",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/permission/search",
              "query": [
                {
                  "key": "projectKey",
                  "value": "{{projectKey}}",
                  "disabled": true
                },
                {
                  "key": "issueKey",
                  "value": "{{issueKey}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "permissions",
                  "value": "{{permissions}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of active users that match the search string and have all specified permissions for the project or issue. This resource can be accessed by users with ADMINISTER_PROJECT permission for the project or global ADMIN or SYSADMIN rights. This endpoint can cause serious performance issues and will be removed in Jira 9.0.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Find users for picker by query",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/picker",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "query",
                  "value": "{{query}}",
                  "disabled": true
                },
                {
                  "key": "exclude",
                  "value": "{{exclude}}",
                  "disabled": true
                },
                {
                  "key": "showAvatar",
                  "value": "{{showAvatar}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of users matching query with highlighting.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get keys of all properties for a user",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/properties",
              "query": [
                {
                  "key": "userKey",
                  "value": "{{userKey}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [],
            "description": "Returns the keys of all properties for the user identified by the key or by the id."
          },
          "response": []
        },
        {
          "name": "Get the value of a specified user's property",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/properties/:propertyKey",
              "query": [
                {
                  "key": "userKey",
                  "value": "{{userKey}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [],
            "description": "Returns the value of the property with a given key from the user identified by the key or by the id."
          },
          "response": []
        },
        {
          "name": "Set the value of a specified user's property",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/properties/:propertyKey",
              "query": [
                {
                  "key": "userKey",
                  "value": "{{userKey}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Sets the value of the specified user's property.\nYou can use this resource to store a custom data against the user identified by the key or by the id. The user\nwho stores the data is required to have permissions to administer the user.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a specified user's property",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/properties/:propertyKey",
              "query": [
                {
                  "key": "userKey",
                  "value": "{{userKey}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "propertyKey",
                  "value": "{{propertyKey}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Removes the property from the user identified by the key or by the id. The user who removes the property is required to have permissions to administer the user."
          },
          "response": []
        },
        {
          "name": "Find users by username",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/search",
              "query": [
                {
                  "key": "includeInactive",
                  "value": "{{includeInactive}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "includeActive",
                  "value": "{{includeActive}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Finds users.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Delete user session",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/session/:username",
              "query": [],
              "variable": [
                {
                  "key": "username",
                  "value": "{{username}}",
                  "description": "a String containing username.",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Invalidates session of given user.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Find users with browse permission",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/user/viewissue/search",
              "query": [
                {
                  "key": "projectKey",
                  "value": "{{projectKey}}",
                  "disabled": true
                },
                {
                  "key": "issueKey",
                  "value": "{{issueKey}}",
                  "disabled": true
                },
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "username",
                  "value": "{{username}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a list of active users that match the search string. This resource cannot be accessed anonymously and requires the Browse Users global permission. Given an issue key this resource will provide a list of users that match the search string and have the browse issue permission for the issue provided.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "version",
      "item": [
        {
          "name": "Get paginated versions",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version",
              "query": [
                {
                  "key": "maxResults",
                  "value": "{{maxResults}}",
                  "disabled": true
                },
                {
                  "key": "query",
                  "value": "{{query}}",
                  "disabled": true
                },
                {
                  "key": "projectIds",
                  "value": "{{projectIds}}",
                  "disabled": true
                },
                {
                  "key": "startAt",
                  "value": "{{startAt}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Retrieve paginated collection of versions matching given query optionally filtered by given project IDs.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create new version",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Creates a version.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get remote version links by global ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/remotelink",
              "query": [
                {
                  "key": "globalId",
                  "value": "{{globalId}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the remote version links for a given global ID.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get version details",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/:id",
              "query": [
                {
                  "key": "expand",
                  "value": "{{expand}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a version.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Update version details",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Updates a version.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Merge versions",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/:id/mergeto/:moveIssuesTo",
              "query": [],
              "variable": [
                {
                  "key": "moveIssuesTo",
                  "value": "{{moveIssuesTo}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [],
            "description": "Merge versions",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Modify version's sequence",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/:id/move",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Modify a version's sequence within a project.\nThe move version bean has 2 alternative field value pairs:\n- position: An absolute position, which may have a value of 'First', 'Last', 'Earlier' or 'Later'\n- after: A version to place this version after.  The value should be the self link of another version",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get version related issues count",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/:id/relatedIssueCounts",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns a bean containing the number of fixed in and affected issues for the given version.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Delete version and replace values",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/:id/removeAndSwap",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Delete a project version, removed values will be replaced with ones specified by the parameters.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get version unresolved issues count",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/:id/unresolvedIssueCount",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the number of unresolved issues for the given version",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get remote version links by version ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/:versionId/remotelink",
              "query": [],
              "variable": [
                {
                  "key": "versionId",
                  "value": "{{versionId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the remote version links associated with the given version ID.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create or update remote version link without global ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/:versionId/remotelink",
              "query": [],
              "variable": [
                {
                  "key": "versionId",
                  "value": "{{versionId}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Create a remote version link via POST. The link's global ID will be taken from the JSON payload if provided; otherwise, it will be generated.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete all remote version links for version",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/:versionId/remotelink",
              "query": [],
              "variable": [
                {
                  "key": "versionId",
                  "value": "{{versionId}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Delete all remote version links for a given version ID.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Get specific remote version link",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/:versionId/remotelink/:globalId",
              "query": [],
              "variable": [
                {
                  "key": "versionId",
                  "value": "{{versionId}}",
                  "disabled": false
                },
                {
                  "key": "globalId",
                  "value": "{{globalId}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the remote version link associated with the given version ID and global ID.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create or update remote version link with global ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/:versionId/remotelink/:globalId",
              "query": [],
              "variable": [
                {
                  "key": "versionId",
                  "value": "{{versionId}}",
                  "disabled": false
                },
                {
                  "key": "globalId",
                  "value": "{{globalId}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Create a remote version link via POST using the provided global ID.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete specific remote version link",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/version/:versionId/remotelink/:globalId",
              "query": [],
              "variable": [
                {
                  "key": "versionId",
                  "value": "{{versionId}}",
                  "disabled": false
                },
                {
                  "key": "globalId",
                  "value": "{{globalId}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Delete a specific remote version link with the given version ID and global ID.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "workflow",
      "item": [
        {
          "name": "Get all workflows",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflow",
              "query": [
                {
                  "key": "workflowName",
                  "value": "{{workflowName}}",
                  "disabled": true,
                  "description": "an optional String containing workflow name. If not passed then all workflows are returned"
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [],
            "description": "Returns all workflows. The âlastModifiedDateâ is returned in Jira Complete Date/Time Format (dd/MMM/yy h:mm by default), but can also be returned as a relative date.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "workflowscheme",
      "item": [
        {
          "name": "Create a new workflow scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "Create a new workflow scheme. The body contains a representation of the new scheme. Values not passed are assumed to be set to their defaults.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Get requested workflow scheme by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id",
              "query": [
                {
                  "key": "returnDraftIfExists",
                  "value": "{{returnDraftIfExists}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the requested workflow scheme to the caller."
          },
          "response": []
        },
        {
          "name": "Update a specified workflow scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Update the passed workflow scheme. The body of the request is a representation of the workflow scheme. Values not passed are assumed to indicate no change for that field.\nThe passed representation can have its updateDraftIfNeeded flag set to true to indicate that the draft\nshould be created and/or updated when the actual scheme cannot be edited (e.g. when the scheme is being used by\na project). Values not appearing the body will not be touched.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete the specified workflow scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Delete the passed workflow scheme."
          },
          "response": []
        },
        {
          "name": "Create a draft for a workflow scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/createdraft",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "POST",
            "header": [],
            "description": "Create a draft for the passed scheme. The draft will be a copy of the state of the parent."
          },
          "response": []
        },
        {
          "name": "Get default workflow for a scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/default",
              "query": [
                {
                  "key": "returnDraftIfExists",
                  "value": "{{returnDraftIfExists}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Return the default workflow from the passed workflow scheme."
          },
          "response": []
        },
        {
          "name": "Update default workflow for a scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/default",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Set the default workflow for the passed workflow scheme. The passed representation can have its\nupdateDraftIfNeeded flag set to true to indicate that the draft should be created/updated when the actual scheme\ncannot be edited.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Remove default workflow from a scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/default",
              "query": [
                {
                  "key": "updateDraftIfNeeded",
                  "value": "{{updateDraftIfNeeded}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Remove the default workflow from the passed workflow scheme."
          },
          "response": []
        },
        {
          "name": "Get requested draft workflow scheme by ID",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/draft",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the requested draft workflow scheme to the caller."
          },
          "response": []
        },
        {
          "name": "Update a draft workflow scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/draft",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Update a draft workflow scheme. The draft will created if necessary. The body of the request is a representation of the workflow scheme. Values not passed are assumed to indicate no change for that field.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete the specified draft workflow scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/draft",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [],
            "description": "Delete the passed draft workflow scheme."
          },
          "response": []
        },
        {
          "name": "Get default workflow for a draft scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/draft/default",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Return the default workflow from the passed draft workflow scheme to the caller."
          },
          "response": []
        },
        {
          "name": "Update default workflow for a draft scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/draft/default",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Set the default workflow for the passed draft workflow scheme.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Remove default workflow from a draft scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/draft/default",
              "query": [],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Remove the default workflow from the passed draft workflow scheme."
          },
          "response": []
        },
        {
          "name": "Get issue type mapping for a draft scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/draft/issuetype/:issueType",
              "query": [],
              "variable": [
                {
                  "key": "issueType",
                  "value": "{{issueType}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the issue type mapping for the passed draft workflow scheme."
          },
          "response": []
        },
        {
          "name": "Set an issue type mapping for a draft scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/draft/issuetype/:issueType",
              "query": [],
              "variable": [
                {
                  "key": "issueType",
                  "value": "{{issueType}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Set the issue type mapping for the passed draft scheme. The passed representation can have its updateDraftIfNeeded flag set to true to indicate that\nthe draft should be created/updated when the actual scheme cannot be edited.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete an issue type mapping from a draft scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/draft/issuetype/:issueType",
              "query": [],
              "variable": [
                {
                  "key": "issueType",
                  "value": "{{issueType}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Remove the specified issue type mapping from the draft scheme."
          },
          "response": []
        },
        {
          "name": "Get draft workflow mappings",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/draft/workflow",
              "query": [
                {
                  "key": "workflowName",
                  "value": "{{workflowName}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the draft workflow mappings or requested mapping to the caller."
          },
          "response": []
        },
        {
          "name": "Update a workflow mapping in a draft scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/draft/workflow",
              "query": [
                {
                  "key": "workflowName",
                  "value": "{{workflowName}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Update the draft scheme to include the passed mapping. The body is a representation of the workflow mapping. Values not passed are assumed to indicate no change for that field.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a workflow mapping from a draft scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/draft/workflow",
              "query": [
                {
                  "key": "workflowName",
                  "value": "{{workflowName}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Delete the passed workflow from the draft workflow scheme."
          },
          "response": []
        },
        {
          "name": "Get issue type mapping for a scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/issuetype/:issueType",
              "query": [
                {
                  "key": "returnDraftIfExists",
                  "value": "{{returnDraftIfExists}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "issueType",
                  "value": "{{issueType}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the issue type mapping for the passed workflow scheme."
          },
          "response": []
        },
        {
          "name": "Set an issue type mapping for a scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/issuetype/:issueType",
              "query": [],
              "variable": [
                {
                  "key": "issueType",
                  "value": "{{issueType}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Set the issue type mapping for the passed scheme. The passed representation can have its updateDraftIfNeeded flag set to true to indicate that\nthe draft should be created/updated when the actual scheme cannot be edited.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete an issue type mapping from a scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/issuetype/:issueType",
              "query": [
                {
                  "key": "updateDraftIfNeeded",
                  "value": "{{updateDraftIfNeeded}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "issueType",
                  "value": "{{issueType}}",
                  "disabled": false
                },
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Remove the specified issue type mapping from the scheme."
          },
          "response": []
        },
        {
          "name": "Get workflow mappings for a scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/workflow",
              "query": [
                {
                  "key": "workflowName",
                  "value": "{{workflowName}}",
                  "disabled": true
                },
                {
                  "key": "returnDraftIfExists",
                  "value": "{{returnDraftIfExists}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns the workflow mappings or requested mapping to the caller for the passed scheme."
          },
          "response": []
        },
        {
          "name": "Update a workflow mapping in a scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/workflow",
              "query": [
                {
                  "key": "workflowName",
                  "value": "{{workflowName}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "PUT",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Update the scheme to include the passed mapping. The body is a representation of the workflow mapping. Values not passed are assumed to indicate no change for that field.\nThe passed representation can have its updateDraftIfNeeded flag set to true to indicate that the draft\nshould be created/updated when the actual scheme cannot be edited.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete a workflow mapping from a scheme",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/workflowscheme/:id/workflow",
              "query": [
                {
                  "key": "updateDraftIfNeeded",
                  "value": "{{updateDraftIfNeeded}}",
                  "disabled": true
                },
                {
                  "key": "workflowName",
                  "value": "{{workflowName}}",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "disabled": false
                }
              ]
            },
            "method": "DELETE",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Delete the passed workflow from the workflow scheme."
          },
          "response": []
        }
      ]
    },
    {
      "name": "worklog",
      "item": [
        {
          "name": "Returns worklogs deleted since given time.",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/worklog/deleted",
              "query": [
                {
                  "key": "since",
                  "value": "{{since}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns worklogs id and delete time of worklogs that was deleted since given time. The returns set of worklogs is limited to 1000 elements. This API will not return worklogs deleted during last minute."
          },
          "response": []
        },
        {
          "name": "Returns worklogs for given ids.",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/worklog/list",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns worklogs for given worklog ids. Only worklogs to which the calling user has permissions, will be included in the result. The returns set of worklogs is limited to 1000 elements.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Returns worklogs updated since given time.",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}api/2/worklog/updated",
              "query": [
                {
                  "key": "since",
                  "value": "{{since}}",
                  "disabled": true
                }
              ],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns worklogs id and update time of worklogs that was updated since given time. The returns set of worklogs is limited to 1000 elements. This API will not return worklogs updated during last minute."
          },
          "response": []
        }
      ]
    },
    {
      "name": "session",
      "item": [
        {
          "name": "Get current user session information",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}auth/1/session",
              "query": [],
              "variable": []
            },
            "method": "GET",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Returns information about the currently authenticated user's session. If the caller is not authenticated they will get a 401 Unauthorized status code.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        },
        {
          "name": "Create new user session",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}auth/1/session",
              "query": [],
              "variable": []
            },
            "method": "POST",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "description": "",
                "disabled": false,
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "description": "Creates a new session for a user in Jira. Once a session has been successfully created it can be used to access any of Jira's remote APIs and also the web UI by passing the appropriate HTTP Cookie header. Note that it is generally preferrable to use HTTP BASIC authentication with the REST API. However, this resource may be used to mimic the behaviour of Jira's log-in page (e.g. to display log-in errors to a user).",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            },
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        },
        {
          "name": "Delete current user session",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}auth/1/session",
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "header": [],
            "description": "Logs the current user out of Jira, destroying the existing session, if any.",
            "auth": {
              "type": "basic",
              "basic": {
                "username": "{{username}}",
                "password": "{{apiToken}}"
              }
            }
          },
          "response": []
        }
      ]
    },
    {
      "name": "websudo",
      "item": [
        {
          "name": "Invalidate the current WebSudo session",
          "request": {
            "url": {
              "protocol": "{{protocol}}",
              "host": "{{host}}",
              "path": "{{basePath}}auth/1/websudo",
              "query": [],
              "variable": []
            },
            "method": "DELETE",
            "header": [
              {
                "description": "",
                "disabled": false,
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "description": "This method invalidates the any current WebSudo session.",
            "body": {
              "mode": "raw",
              "raw": ""
            }
          },
          "response": []
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "protocol",
      "name": "Protocol",
      "description": "The HTTP Protocol that should be used for this REST API.",
      "type": "string",
      "value": "http"
    },
    {
      "key": "host",
      "name": "Host",
      "description": "The HTTP host that should be used for this REST API.",
      "type": "string",
      "value": "api.atlassian.com"
    },
    {
      "key": "basePath",
      "name": "Base Path",
      "description": "The path, after the host, of the base of the REST API.",
      "type": "string",
      "value": "%7Bbaseurl%7D/rest/"
    }
  ]
}